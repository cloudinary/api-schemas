openapi: 3.1.0
info:
  title: Cloudinary Config API
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Cloudinary Support
    email: support@cloudinary.com
    url: https://support.cloudinary.com
  termsOfService: https://cloudinary.com/tou
servers:
  - url: https://{defaultHost}
    variables:
      defaultHost:
        default: api.cloudinary.com
        description: The host name for the API endpoint.
security:
  - basic_auth: []
tags:
  - name: upload_presets
    description: Enables you to manage upload presets.
  - name: metadata_fields
    description: Enables you to manage structured metadata fields.
  - name: metadata_rules
    description: Enables you to set up dependencies and relationships between structured metadata fields and options.
  - name: upload_mappings
    description: Enables you to manage upload mappings
  - name: moderations
    description: Enables you to manage moderation definitions.
  - name: streaming_profiles
    description: Enables you to manage streaming profiles
  - name: transformations
    description: Enables you to manage named and unnamed transformations.
  - name: triggers
    description: Enables you to manage event triggers and notifications.
paths:
  /v1_1/{cloud_name}/transformations:
    get:
      x-speakeasy-mcp:
        name: list-transformations
        scopes:
          - builder
      summary: Get transformations
      description: |
        Retrieves a list of all transformations, which can be filtered to show either only named or unnamed transformations.
      tags:
        - transformations
      operationId: listTransformations
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: named
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to return only named (`true`) or unnamed (`false`) transformations. If this parameter isn't included, both named and unnamed transformations will be returned.
        - name: max_results
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 10
          description: Maximum number of transformations to return.
          example: 20
        - name: next_cursor
          in: query
          required: false
          schema:
            type: string
          description: When a request has more results to return than `max_results`, the `next_cursor` value is returned as part of the response. You can then specify this value as the `next_cursor` parameter of a following request.
          example: 8edbc61040178db60b0973ca9494bf3a
      responses:
        '200':
          description: Transformations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/transformations/{transformation}:
    get:
      x-speakeasy-mcp:
        name: get-transformation-details
        scopes:
          - builder
      summary: Get a transformation
      description: |
        Retrieves details for a named or unnamed transformation.
      tags:
        - transformations
      operationId: getTransformation
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/transformation'
      responses:
        '200':
          description: Transformation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transformation_info'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Transformation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    post:
      x-speakeasy-mcp:
        name: create-transformation
        scopes:
          - builder
      summary: Create a named transformation
      description: |
        Creates a new named transformation with the given name and transformation string.
      tags:
        - transformations
      operationId: createTransformation
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/transformation_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_request'
      responses:
        '200':
          description: Transformation created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '409':
          description: Conflict (transformation already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: update-transformation
        scopes:
          - builder
      summary: Update a transformation
      description: |
        Update an existing named or unnamed transformation.
      tags:
        - transformations
      operationId: updateTransformation
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/transformation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_request'
      responses:
        '200':
          description: Transformation updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-transformation
        scopes:
          - builder
      summary: Delete a transformation
      description: |
        Delete a named or unnamed transformation. Optionally invalidate derived resources generated using the named transformation.
      tags:
        - transformations
      operationId: deleteTransformation
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/transformation'
        - name: invalidate
          in: query
          required: false
          schema:
            type: boolean
          description: Invalidate derived resources generated using the deleted transformation from CDN.
          example: true
      responses:
        '200':
          description: Transformation deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Transformation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/upload_presets:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      x-speakeasy-mcp:
        name: create-upload-preset
        scopes:
          - builder
      operationId: createUploadPreset
      summary: Creates an upload preset
      tags:
        - upload_presets
      parameters: []
      responses:
        '200':
          description: upload preset created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  message:
                    type: string
                  external_id:
                    type: string
                required:
                  - message
                  - name
                  - external_id
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '409':
          description: preset exists error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upload_preset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/upload_preset'
    get:
      x-speakeasy-mcp:
        name: list-upload-presets
        scopes:
          - builder
      operationId: listUploadPresets
      summary: lists upload presets
      tags:
        - upload_presets
      parameters:
        - name: order_by
          in: query
          required: false
          schema:
            type: string
            enum:
              - name
              - id
              - updated_at
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: next_cursor
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: upload presets retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  presets:
                    type: array
                    items:
                      $ref: '#/components/schemas/upload_preset'
                required:
                  - presets
        '400':
          description: request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/upload_presets/{name}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      x-speakeasy-mcp:
        name: get-upload-preset-details
        scopes:
          - builder
      operationId: getUploadPreset
      summary: Retrieves details of a single upload preset
      tags:
        - upload_presets
      responses:
        '200':
          description: upload preset retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_preset'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: preset not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: update-upload-preset
        scopes:
          - builder
      operationId: updateUploadPreset
      summary: Updates an upload preset
      tags:
        - upload_presets
      parameters: []
      responses:
        '200':
          description: upload preset updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  external_id:
                    type: string
                required:
                  - message
                  - external_id
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: preset not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upload_preset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/upload_preset'
    delete:
      x-speakeasy-mcp:
        name: delete-upload-preset
        scopes:
          - builder
      operationId: deleteUploadPreset
      summary: Deletes an upload preset
      tags:
        - upload_presets
      responses:
        '200':
          description: upload preset deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  external_id:
                    type: string
                required:
                  - message
                  - external_id
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: preset not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      x-speakeasy-mcp:
        name: create-metadata-field
        scopes:
          - builder
      operationId: createMetadataField
      summary: Create a metadata field
      description: Creates a new metadata field with the specified properties and configuration.
      tags:
        - metadata_fields
      responses:
        '200':
          description: metadata field created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field'
        '400':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata_field'
    get:
      x-speakeasy-mcp:
        name: list-metadata-fields
        scopes:
          - builder
      operationId: listMetadataFields
      summary: Get metadata fields
      description: Retrieves a list of all metadata fields in the product environment based on the provided filters.
      tags:
        - metadata_fields
      parameters:
        - name: external_ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: The external IDs of the metadata fields to retrieve. if not provided, all metadata fields will be returned.
      responses:
        '200':
          description: metadata fields retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata_fields:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata_field'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/{external_id}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the metadata field to retrieve.
    get:
      x-speakeasy-mcp:
        name: get-metadata-field
        scopes:
          - builder
      operationId: getMetadataField
      summary: Get metadata field
      description: Retrieves detailed information about the specified metadata field.
      tags:
        - metadata_fields
      responses:
        '200':
          description: metadata field retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: update-metadata-field
        scopes:
          - builder
      operationId: updateMetadataField
      summary: Update metadata field
      description: Updates the properties and configuration of the specified metadata field.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata_field'
      responses:
        '200':
          description: metadata field updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field'
        '400':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-metadata-field
        scopes:
          - builder
      operationId: deleteMetadataField
      summary: Delete metadata field
      description: Permanently deletes the specified metadata field and all its associated data.
      tags:
        - metadata_fields
      responses:
        '200':
          description: metadata field deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        '400':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/datasource/search:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      operationId: searchMetadataFieldDatasource
      summary: Search across all metadata field datasources
      description: Performs a search across all metadata field datasources to find matching values.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                term:
                  type: string
                  description: The term to search for. Can be any substring of the value.
                max_results:
                  type: integer
                  default: 100
                  description: The maximum number of results to return.
      responses:
        '200':
          description: search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    field_id:
                      type: string
                      description: The external ID of the metadata field.
                    id:
                      type: string
                      description: The external ID of the option.
                    value:
                      type: string
                      description: The value of the option.
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/order:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    put:
      operationId: reorderMetadataFields
      summary: Reorder all metadata fields
      description: Changes the display order of all metadata fields based on specified criteria.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_by:
                  type: string
                  enum:
                    - label
                    - created_at
                    - external_id
                  description: The field to order by.
                direction:
                  type: string
                  enum:
                    - asc
                    - desc
                  description: The direction to order by.
              required:
                - order_by
      responses:
        '200':
          description: metadata fields reordered
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata_fields:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata_field'
        '400':
          description: invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/{external_id}/reorder:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the metadata field to reorder.
    put:
      operationId: reorderMetadataField
      summary: Change position of metadata field
      description: Changes the display position of a specific metadata field within the list.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  type: integer
                  description: The position of the metadata field.
              required:
                - position
      responses:
        '200':
          description: metadata fields reordered
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata_fields:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata_field'
        '400':
          description: invalid position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/{external_id}/datasource:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the metadata field to update the datasource for.
    put:
      x-speakeasy-mcp:
        name: update-metadata-datasource-values
        scopes:
          - builder
      operationId: updateMetadataFieldDatasource
      summary: Update datasource values
      description: Updates the values in a metadata field's datasource, including adding, modifying, or changing the order of values.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                values:
                  type: array
                  items:
                    type: object
                    properties:
                      external_id:
                        type: string
                        description: The external ID of the datasource value.
                      value:
                        type: string
                        description: The value of the option.
                      position:
                        type: integer
                        description: The position of the option.
                      state:
                        type: string
                        enum:
                          - active
                          - inactive
                        description: The state of the option.
      responses:
        '200':
          description: datasource updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata_field_datasource_value'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-metadata-datasource-values
        scopes:
          - builder
      operationId: deleteMetadataFieldDatasource
      summary: Delete datasource values
      description: Removes specific values from a metadata field's datasource by their external IDs.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                external_ids:
                  type: array
                  items:
                    type: string
                  description: The external IDs of the datasource values to delete.
              required:
                - external_ids
      responses:
        '200':
          description: datasource values deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field_datasource_values_array'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/{external_id}/datasource/search:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the metadata field to search the datasource for.
    post:
      operationId: searchDatasourceInMDField
      summary: Search datasource values in a metadata field
      description: Performs a search within a specific metadata field's datasource to find matching values, with support for exact or partial matches.
      tags:
        - metadata_fields
      parameters:
        - name: max_results
          in: query
          required: false
          schema:
            type: integer
            default: 255
          description: The maximum number of results to return.
        - name: term
          in: query
          required: false
          schema:
            type: string
          description: The term to search for. can be any substring of the value.
        - name: exact_match
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to search for an exact match.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  description: Metadata payload for rule-based inference
      responses:
        '200':
          description: search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field_datasource_values_array'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_fields/{external_id}/datasource_restore:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the metadata field to restore the datasource values for.
    post:
      operationId: restoreMetadataFieldDatasource
      summary: Restore datasource values
      description: Restores datasource values that have been deleted.
      tags:
        - metadata_fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                external_ids:
                  type: array
                  items:
                    type: string
                  description: The external IDs of the datasource values to restore.
      responses:
        '200':
          description: datasource values restored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_field_datasource_values_array'
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata field not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_rules:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      x-speakeasy-mcp:
        name: create-metadata-rule
        scopes:
          - builder
      operationId: createMetadataRule
      summary: Create a metadata rule
      description: Creates a new metadata rule with the specified properties and configuration.
      tags:
        - metadata_rules
      responses:
        '200':
          description: metadata rule created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_rule_response'
        '400':
          description: validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata_rule_create'
    get:
      x-speakeasy-mcp:
        name: list-metadata-rules
        scopes:
          - builder
      operationId: listMetadataRules
      summary: Get metadata rules
      description: Retrieves a list of all metadata rules in the cloud.
      tags:
        - metadata_rules
      responses:
        '200':
          description: metadata rules retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata_rules:
                    type: array
                    items:
                      $ref: '#/components/schemas/metadata_rule_response'
        '401':
          description: authentication error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/metadata_rules/{external_id}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: external_id
        in: path
        required: true
        schema:
          type: string
        description: The unique identifier of the metadata rule.
    put:
      x-speakeasy-mcp:
        name: update-metadata-rule
        scopes:
          - builder
      operationId: updateMetadataRule
      summary: Update metadata rule
      description: Updates the properties and configuration of an existing metadata rule.
      tags:
        - metadata_rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata_rule_update'
      responses:
        '200':
          description: metadata rule updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_rule_response'
        '400':
          description: validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata rule not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-metadata-rule
        scopes:
          - builder
      operationId: deleteMetadataRule
      summary: Delete metadata rule
      description: Permanently deletes a metadata rule.
      tags:
        - metadata_rules
      responses:
        '200':
          description: metadata rule deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
        '400':
          description: validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: metadata rule not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/upload_mappings:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    get:
      x-speakeasy-mcp:
        name: list-upload-mappings
        scopes:
          - builder
      operationId: listUploadMappings
      summary: Lists upload mappings
      description: |
        Returns a list of all upload mappings defined for your account.
        Upload mappings allow you to map an upload preset to a specific folder and URL template.
      tags:
        - upload_mappings
      parameters:
        - name: folder
          in: query
          required: false
          description: Get details of a specific mapping by folder name
          schema:
            type: string
        - name: next_cursor
          in: query
          required: false
          description: For pagination - value from the previous response to get the next page of results
          schema:
            type: string
        - name: max_results
          in: query
          required: false
          description: Maximum number of results to return per request (1-500)
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 10
      responses:
        '200':
          description: Upload mappings retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: List response
                    properties:
                      mappings:
                        type: array
                        description: Array of upload mapping objects
                        items:
                          $ref: '#/components/schemas/upload_mapping'
                      total_entries:
                        type: integer
                        description: Total number of mappings
                      next_cursor:
                        type: string
                        description: Cursor for getting the next page of results
                    required:
                      - mappings
                      - total_entries
                  - $ref: '#/components/schemas/upload_mapping'
                    description: Single mapping response when using folder parameter
        '400':
          description: Validation error (e.g. invalid next_cursor)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error - Invalid API key or secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Mapping not found for the specified folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    post:
      x-speakeasy-mcp:
        name: create-upload-mapping
        scopes:
          - builder
      operationId: createUploadMapping
      summary: Creates an upload mapping
      description: Creates a new upload mapping for the specified folder
      tags:
        - upload_mappings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folder:
                  type: string
                  description: The folder name for the mapping
                  example: my_folder
                template:
                  type: string
                  description: The template URL
                  example: http://example.com/files
              required:
                - folder
                - template
      responses:
        '200':
          description: Upload mapping created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: created
                  folder:
                    type: string
                    description: The folder name that was created
                  external_id:
                    type: string
                    description: Unique identifier for the mapping
                required:
                  - message
                  - folder
                  - external_id
        '400':
          description: Validation error (e.g. invalid template format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error - Invalid API key or secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '409':
          description: A mapping for this folder already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: update-upload-mapping
        scopes:
          - builder
      operationId: updateUploadMapping
      summary: Updates an upload mapping
      description: Updates the URL template for an existing folder mapping
      tags:
        - upload_mappings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folder:
                  type: string
                  description: The folder name of the mapping to update
                template:
                  type: string
                  description: The new URL template
              required:
                - folder
                - template
      responses:
        '200':
          description: Upload mapping updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: updated
                  external_id:
                    type: string
                    description: Unique identifier of the updated mapping
                required:
                  - message
                  - external_id
        '400':
          description: Validation error (e.g. invalid template format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error - Invalid API key or secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: No mapping found for the specified folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-upload-mapping
        scopes:
          - builder
      operationId: deleteUploadMapping
      summary: Deletes an upload mapping
      description: Permanently deletes the upload mapping for the specified folder
      tags:
        - upload_mappings
      parameters:
        - name: folder
          in: query
          required: true
          description: The folder name of the mapping to delete
          schema:
            type: string
      responses:
        '200':
          description: Upload mapping deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: deleted
                  external_id:
                    type: string
                    description: Unique identifier of the deleted mapping
                required:
                  - message
                  - external_id
        '401':
          description: Authentication error - Invalid API key or secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: No mapping found for the specified folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/upload_mappings/replace:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    put:
      operationId: replaceUploadMappings
      summary: Replaces all upload mappings
      tags:
        - upload_mappings
      responses:
        '200':
          description: upload mappings replaced
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        '400':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mappings:
                  type: array
                  items:
                    type: object
                    properties:
                      folder:
                        type: string
                      template:
                        type: string
                    required:
                      - folder
                      - template
              required:
                - mappings
  /v1_1/{cloud_name}/triggers:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    get:
      x-speakeasy-mcp:
        name: list-triggers
        scopes:
          - builder
      operationId: listTrigger
      summary: Get event triggers
      description: |
        Retrieves a list of all event triggers and notifications within your product environment.
      tags:
        - triggers
      parameters:
        - name: event_type
          in: query
          required: false
          description: The type of event that will trigger the notification response.
          schema:
            type: string
      responses:
        '200':
          description: Triggers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: List response
                properties:
                  triggers:
                    type: array
                    description: List of trigger objects.
                    items:
                      $ref: '#/components/schemas/trigger_info'
                  total:
                    type: integer
                    description: Total number of triggers.
                    example: 1
                required:
                  - triggers
                  - total
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: Invalid value a for parameter event_type
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: Invalid credentials
    post:
      x-speakeasy-mcp:
        name: create-trigger
        scopes:
          - builder
      operationId: createTrigger
      summary: Create a trigger
      description: |
        Creates a new trigger. 
        Your product environment supports triggers up to a maximum determined by multiplying the number of unique event types by the limit of 30 notification URLs.
      tags:
        - triggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uri:
                  type: string
                  description: The URL that will receive the notification response.
                  format: uri
                  example: https://trigger.site/124
                event_type:
                  type: string
                  description: The type of event that will trigger the notification response.
                  example: upload
              required:
                - uri
                - event_type
      responses:
        '201':
          description: Trigger created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trigger_info'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: limit_reached
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: Invalid credentials
        '409':
          description: Validation error - Record already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: record_already_exists
  /v1_1/{cloud_name}/triggers/{id}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: The ID of the trigger to update.
          example: c2c822dd1aa41ba6d81299df8b5ae949
    put:
      x-speakeasy-mcp:
        name: update-trigger
        scopes:
          - builder
      operationId: updateTrigger
      summary: Update trigger URL
      description: Updates a notification URL for a trigger.
      tags:
        - triggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_uri:
                  type: string
                  format: uri
                  example: http://example.com
                  description: The updated URL that will receive the notification response.
              required:
                - new_uri
      responses:
        '200':
          description: Trigger updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ok
                required:
                  - message
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
              example:
                error:
                  message: missing_attributes
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: Invalid credentials
        '404':
          description: No trigger found with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: record_not_found
    delete:
      x-speakeasy-mcp:
        name: delete-trigger
        scopes:
          - builder
      operationId: deleteTrigger
      summary: Delete a trigger
      description: Deletes a trigger.
      tags:
        - triggers
      responses:
        '200':
          description: Trigger deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ok
                required:
                  - message
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: invalid_or_malformed_attribute
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: Invalid credentials
        '404':
          description: No trigger found with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
                example:
                  error:
                    message: record_not_found
  /v1_1/{cloud_name}/streaming_profiles:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      x-speakeasy-mcp:
        name: create-streaming-profile
        scopes:
          - builder
      operationId: createStreamingProfile
      summary: Create streaming profile
      tags:
        - streaming_profiles
      parameters: []
      responses:
        '200':
          description: Streaming profile created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/streaming_profile'
                required:
                  - data
        '400':
          description: Invalid request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '409':
          description: Profile name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/streaming_profile_create'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/streaming_profile_create'
    get:
      x-speakeasy-mcp:
        name: list-streaming-profiles
        scopes:
          - builder
      operationId: getStreamingProfiles
      summary: Get streaming profiles
      tags:
        - streaming_profiles
      parameters: []
      responses:
        '200':
          description: Streaming profiles retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/streaming_profile'
                required:
                  - data
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/streaming_profiles/{name}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: name
        in: path
        required: true
        schema:
          type: string
          description: The name of the streaming profile
    get:
      x-speakeasy-mcp:
        name: get-streaming-profile
        scopes:
          - builder
      operationId: getStreamingProfile
      summary: Get streaming profile
      tags:
        - streaming_profiles
      responses:
        '200':
          description: Streaming profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/streaming_profile'
                required:
                  - data
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: update-streaming-profile
        scopes:
          - builder
      operationId: updateStreamingProfile
      summary: Update streaming profile
      tags:
        - streaming_profiles
      parameters: []
      responses:
        '200':
          description: Streaming profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/streaming_profile'
                required:
                  - message
                  - data
        '400':
          description: Invalid request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/streaming_profile_update'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/streaming_profile_update'
    delete:
      x-speakeasy-mcp:
        name: delete-streaming-profile
        scopes:
          - builder
      operationId: deleteStreamingProfile
      summary: Delete custom streaming profile or revert built-in profile to the original settings
      tags:
        - streaming_profiles
      responses:
        '200':
          description: Streaming profile deleted or reverted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        '400':
          description: Cannot delete predefined profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
  parameters:
    cloud_name:
      name: cloud_name
      in: path
      required: true
      schema:
        type: string
        description: The cloud name of your product environment.
    transformation:
      name: transformation
      in: path
      required: true
      schema:
        type: string
      description: |
        The transformation identifier. Can be either a named transformation (e.g., 'small_profile_thumbnail') or a transformation string (e.g., 'w_100,h_150,c_fill,g_auto').
      examples:
        named:
          summary: Named transformation
          value: small_profile_thumbnail
        string:
          summary: Transformation string
          value: w_100,h_150,c_fill,g_auto
    transformation_name:
      name: transformation
      in: path
      required: true
      schema:
        type: string
        example: small_profile_thumbnail
      description: |
        The valid transformation name to create.
  schemas:
    transformation_summary:
      type: object
      properties:
        name:
          type: string
          example: t_small_profile_thumbnail
        allowed_for_strict:
          type: boolean
          example: true
        used:
          type: boolean
          example: false
        named:
          type: boolean
          example: true
    list_response:
      type: object
      properties:
        transformations:
          type: array
          items:
            $ref: '#/components/schemas/transformation_summary'
        next_cursor:
          type:
            - string
            - 'null'
    api_error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - error
    transformation_info:
      type: object
      properties:
        name:
          type: string
          example: small_profile_thumbnail
        allowed_for_strict:
          type: boolean
          description: |
            Whether to allow this named transformation when [strict transformations](https://cloudinary.com/documentation/control_access_to_media#strict_transformations) are enabled.
          example: true
        used:
          type: boolean
          example: true
        named:
          type: boolean
          example: true
        info:
          type: array
          description: API transformation parameters
          items:
            type: object
            properties:
              width:
                type: integer
              height:
                type: integer
              crop:
                type: string
              gravity:
                type: string
          example:
            - width: 100
              height: 150
              crop: fill
              gravity: auto
        derived:
          type: array
          items:
            type: object
            properties:
              public_id:
                type: string
                example: sample_image
              resource_type:
                type: string
                example: image
              type:
                type: string
                example: upload
              format:
                type: string
                example: jpg
              url:
                type: string
                example: http://res.cloudinary.com/demo/image/upload/v1620000000/sample_image.jpg
              secure_url:
                type: string
                example: https://res.cloudinary.com/demo/image/upload/v1620000000/sample_image.jpg
              bytes:
                type: integer
                example: 123456
              id:
                type: string
                example: 1234abcd5678efgh
        next_cursor:
          type: string
          example: eyJvZmZzZXQiOjEwMH0=
    allowed_for_strict:
      type: boolean
      description: |
        Whether to allow this named transformation when strict transformations are enabled. Strict transformations prevent transformations from being dynamically applied to media assets.
      example: true
    update_request:
      type: object
      properties:
        unsafe_update:
          type: string
          description: |
            Required when modifying the transformation parameters of an existing named transformation. The new transformation definition for the named transformation.
            Because the changed definition can be unsafe for (significantly change) assets in production, the change is applied only to newly generated derived assets that reference this named transformation.

            To apply the change to existing derived assets using this named transformation, invalidate them so that they'll be regenerated with the new definition when next requested.
          example: w_200,h_200,c_fill,g_face
        allowed_for_strict:
          $ref: '#/components/schemas/allowed_for_strict'
    create_request:
      type: object
      required:
        - transformation
      properties:
        transformation:
          type: string
          description: A valid transformation string.
          example: w_100,h_150,c_fill,g_auto
        allowed_for_strict:
          $ref: '#/components/schemas/allowed_for_strict'
    upload_explicit_parameters:
      type: object
      properties:
        accessibility_analysis:
          type: boolean
          description: Whether to return return accessibility analysis values for the image.
        asset_folder:
          type: string
          description: The asset folder to assign to the asset.
        async:
          type: boolean
          description: |
            When set to true, returns the uploaded asset's public_id immediately in the response, before the upload is completed (asynchronously). Default: false.
        auto_chaptering:
          type: boolean
          description: Whether to trigger automatic generation of video chapters. Chapters will be generated and saved as a .vtt file with -chapters appended to the public ID of the video. You can enable chapters as part of the Cloudinary Video Player. Relevant for videos only.
        auto_transcription:
          type: boolean
          description: Whether to trigger automatic generation of video transcription. Transcription will be generated and saved as a .vtt file with -transcription appended to the public ID of the video. Relevant for videos only.
        cinemagraph_analysis:
          type: boolean
          description: Whether to return a cinemagraph analysis value for the media asset between 0 and 1, where 0 means the asset is not a cinemagraph and 1 means the asset is a cinemagraph. Relevant for animated images and video only. A static image will return 0.
        colors:
          type: boolean
          description: 'Whether to retrieve predominant colors & color histogram of the uploaded image. Note: If all returned colors are opaque, then 6-digit RGB hex values are returned. If one or more colors contain an alpha channel, then 8-digit RGBA hex quadruplet values are returned.'
          default: false
        context:
          type: string
          description: Key-value pairs of general textual context metadata to attach to the asset.
        custom_coordinates:
          type: string
          description: An array of coordinates for custom cropping.
        display_name:
          type: string
          description: A display name for the asset.
        eager:
          type: string
          description: A list of transformations to eagerly generate for the asset. Accepts either a single transformation or a pipe-separated list of transformations.
        eager_async:
          type: boolean
          description: Whether to generate the eager transformations asynchronously in the background after the upload request is completed rather than before the upload is completed.
        eager_notification_url:
          type: string
          description: A URL to notify when eager transformations are completed.
        face_coordinates:
          type: string
          description: An array of coordinates representing detected faces in the asset, used for custom cropping or overlays.
        faces:
          type: boolean
          description: Whether to detect faces in the asset.
        headers:
          type: string
          description: |
            An HTTP header or a list of headers lines for adding as response HTTP headers when delivering the asset to your users. Supported headers: Link, Authorization, X-Robots-Tag.
          example: 'X-Robots-Tag: noindex'
        invalidate:
          type: boolean
          description: |
            Whether to invalidate CDN cache copies of a previously uploaded asset that shares the same public ID. Default: false.
        media_metadata:
          type: boolean
          description: |
            Whether to return IPTC, XMP, and detailed Exif metadata of the uploaded asset in the response.
            Supported for images, video, and audio.
            - Returned metadata for images includes: PixelsPerUnitX, PixelsPerUnitY, PixelUnits, Colorspace, and DPI.
            - Returned metadata for audio and video includes: audio_codec, audio_bit_rate, audio_frequency, channels, channel_layout.
            - Additional metadata for video includes: pix_format, codec, level, profile, video_bit_rate, dar.
        metadata:
          type: string
          description: Structured metadata to attach to the asset based on the metadata fields defined for your account.
        moderation:
          type: string
          enum:
            - manual
            - webpurify
            - metascan
            - aws_rek
            - aws_rek_video
            - google_video_moderation
            - perception_point
            - duplicate
            - cld
          description: |
            For all asset types, set to:
            - manual to add the uploaded asset to a list of pending assets that can be moderated using the Admin API or the Cloudinary Console.
            - perception_point to automatically moderate the uploaded asset using the Perception Point Malware Detection add-on.

            For images only, set to:
            - webpurify to automatically moderate the uploaded image using the WebPurify Image Moderation add-on.
            - aws_rek to automatically moderate the uploaded image using the Amazon Rekognition AI Moderation add-on.
            - duplicate:<threshold> to detect if the same or a similar image already exists using the Cloudinary Duplicate Image Detection add-on. Set threshold to a float greater than 0 and less than or equal to 1.0 to specify how similar an image needs to be in order to be considered a duplicate. Set threshold to 0 to add an image to the index of images that are searched when duplicate detection is invoked for another image.

            For videos only, set to:
            - aws_rek_video to automatically moderate the uploaded video using the Amazon Rekognition Video Moderation add-on.
            - google_video_moderation automatically moderate the uploaded video using the Google AI Video Moderation add-on.

            To request multiple moderations in a single API call:
            - Send the desired list of moderations as a pipe-separated string with manual moderation, if relevant, being last.

            Note: Rejected assets are automatically invalidated on the CDN within approximately ten minutes.
          example: aws_rek|duplicate:0|perception_point|manual
        notification_url:
          type: string
          description: A URL to notify when the asset is ready.
        phash:
          type: boolean
          description: |
            Whether to return the perceptual hash (pHash) on the uploaded image for image similarity detection.
        quality_analysis:
          type: boolean
          description: Whether to return a quality analysis value for the image between 0 and 1, where 0 means the image is blurry and out of focus and 1 means the image is sharp and in focus. Relevant for images only.
        regions:
          type: string
          description: Regions to detect in the asset.
        responsive_breakpoints:
          type: array
          description: Settings to automatically generate breakpoints for responsive images.
          items:
            type: object
            properties:
              create_derived:
                type: boolean
              max_width:
                type: integer
              min_width:
                type: integer
              bytes_step:
                type: integer
              max_images:
                type: integer
              transformation:
                type: string
        tags:
          type: string
          description: A comma-separated list of tag names to assign to the asset.
        callback:
          type: string
          description: |
            A URL to redirect to after the upload/explicit is completed instead of returning the upload response. 
            Signed upload result parameters are added to the callback URL. This parameter is ignored for XHR (Ajax XMLHttpRequest) or JavaScript Fetch API upload requests.
            Note: This parameter is relevant for direct uploads from a form in the browser. It is automatically set if you perform direct upload from the browser using Cloudinary's SDKs and the jQuery plugin.
    upload_other_parameters:
      type: object
      properties:
        backup:
          type: boolean
          description: Whether to backup the uploaded asset. When set to true, backs up uploaded assets to a secondary storage bucket.
        discard_original_filename:
          type: boolean
          description: Whether to discard the name of the original uploaded file. Relevant when delivering assets as attachments (setting the flag disposition:attachment in delivery URLs).
        overwrite:
          type: boolean
          description: |
            Whether to overwrite existing assets with the same public ID. When set to false, return immediately if an asset with the same public ID already exists. Default: true (when using unsigned upload, the default is false and cannot be changed to true).
        return_delete_token:
          type: boolean
          description: Whether to return a deletion token in the upload response. The token can be used to delete the uploaded asset within approximately 10 minutes using an unauthenticated API call.
        type:
          type: string
          enum:
            - upload
            - authenticated
            - private
            - asset
          description: The delivery type that defines if and how the uploaded asset is available for public delivery. By default, all uploaded assets are public (upload). Possible values are upload, authenticated, private or asset.
        access_mode:
          type: string
          deprecated: true
          x-speakeasy-deprecation-message: The access_mode parameter is no longer supported. To restrict access to assets, you can use the access_control parameter.
          x-speakeasy-deprecation-replacement: access_control
          enum:
            - public
            - authenticated
          description: |
            Allows the asset to behave as if it's of the authenticated 'type' (see above) while still using the default 'upload' type in delivery URLs. The asset can later be made public by changing its access_mode via the Admin API, without having to update any delivery URLs. Valid values: public, and authenticated.
        categorization:
          type: string
          enum:
            - rekognition_scene
            - imagga_tagging
            - aws_rek_tagging
            - google_video_tagging
            - google_tagging
            - visenze_recognition
            - azure_video_indexer
          description: A comma-separated list of the categorization add-ons to run on the asset. Set to google_tagging, google_video_tagging, imagga_tagging and/or aws_rek_tagging to automatically classify the scenes of the uploaded asset.
        ocr:
          type: string
          enum:
            - adv_ocr
          description: Set to adv_ocr to extract all text elements in an image as well as the bounding box coordinates of each detected element using the OCR text detection and extraction add-on.
        raw_convert:
          type: string
          pattern: ^(aspose|azure_video_indexer(:\D+)*|google_speech(:(vt|sr)t)*(:[a-zA-Z-]+)?|extract_text)$
          description: |
            Generates a related file based on the uploaded file.
            - Set to aspose to automatically create a PDF or other image format from a raw Office document using the Aspose Document Conversion add-on. (Asynchronous)
            - Set to google_speech to instruct the Google AI Video Transcription add-on to generate an automatic transcript raw file from an uploaded video. (Asynchronous)
            - Set to extract_text to extract all the text from a PDF file and store it in a raw JSON file with a public ID in the format: [pdf_public_id].extract_text.json. The full URL of the generated JSON file is included in the API response. Unlike the above raw_convert options, this option doesn't require registering for an add-on.(Synchronous)
            - Set to azure_video_indexer to generate AI-powered video insights from Microsoft Azure. (Asynchronous)
          example: google_speech:vtt:en-US
        background_removal:
          type: string
          enum:
            - cloudinary_ai
            - remove_the_background
            - pixelz
          description: |
            Automatically remove the background of an image using an add-on.
            - Set to cloudinary_ai to use the deep-learning based Cloudinary AI Background Removal add-on.
            - Note: this feature has been superseded by background removal on the fly.
            - Set to pixelz to use the human-powered Pixelz Remove-The-Background Editing add-on service.
            Relevant for images only.
          example: pixelz
        public_id:
          type: string
          description: The identifier that is used for accessing the uploaded asset. If not specified, a unique ID is generated automatically.
        transformation:
          type: string
          description: An incoming transformation to run on the uploaded asset before its storage. In contrast to eager, this parameter is applied before the file is stored.
        format:
          type: string
          description: An optional format to convert the uploaded asset to before saving in the cloud.
          example: jpg
        proxy:
          type: string
          description: A proxy to use for fetching remote URLs. The format should be http://hostname:port.
        folder:
          type: string
          deprecated: true
          x-speakeasy-deprecation-message: |
            If Dynamic folders mode is enabled on your product environment, this parameter is deprecated, and it's recommended to use the asset_folder parameter to control where the asset will be placed. If you also want your public_id to match the initial asset folder path, include the use_asset_folder_as_public_id_prefixparameter.
          description: Folder name where the uploaded asset will be stored. This parameter applies when using the Admin API, or when specifying the upload preset for unsigned uploading with the Upload API.
        allowed_formats:
          type: string
          description: |
            A comma-separated list of file formats that are allowed for uploading. Files of other types will be rejected. The formats can be any combination of image types, video formats or raw file extensions.
            Note: You can also add the `format` parameter to convert other file types instead of rejecting them. In this case, only files that would normally be rejected are converted, any file format allowed for upload wont be converted.
          example: mp4,ogv,jpg,png,pdf
        auto_tagging:
          type: number
          description: |
            Automatically assigns tags to an asset according to detected objects or categories with a confidence score higher than the specified value.
            Use together with the detection parameter for:
            - Cloudinary AI Content Analysis
            - Amazon Rekognition Celebrity Detection
            Use together with the categorization parameter for:
            - Google Automatic Video Tagging
            - Google Auto Tagging
            - Imagga Auto Tagging
            - Amazon Rekognition Auto Tagging
          example: 0.5
          minimum: 0
          maximum: 1
        access_control:
          type: string
          description: |
            Restrict access to the asset by passing an array of access types for the asset. The asset is restricted unless one of the access types is valid.
            Possible values for each access type:
            - token requires either Token-based access or Cookie-based access for accessing the asset.
            For example: access_type: "token"
            - anonymous allows public access to the asset during a set time period. The anonymous access type can optionally include start and/or end dates (in ISO 8601 format) that define when the asset is publicly available. Note that you can only include a single 'anonymous' access type. For example:
            access_type: "anonymous", start: "2017-12-15T12:00Z", end: "2018-01-20T12:00Z"
        eval:
          type: string
          description: Allows you to modify upload parameters by specifying custom logic with JavaScript. This can be useful for conditionally adding tags, contextual metadata, structured metadata or eager transformations depending on specific criteria of the uploaded file.
        detection:
          type: string
          description: |
            Invokes the relevant add-on to return a list of detected content.
            Set to:
            - <content-aware model>_[<version>] (e.g. coco_v2) to return a list of detected content using the Cloudinary AI Content Analysis add-on. Can be used together with the auto_tagging parameter to apply tags automatically.
            - captioning to analyze an image and suggest a caption based on the image's contents.
            - iqa to analyze the quality of an image.
            - watermark-detection to detect watermarks in an image.
            - adv_face to return a list of facial attributes using the Advanced Facial Attribute Detection add-on.
            - aws_rek_face to return a list of detected celebrities and facial attributes using the Amazon Rekognition Celebrity Detection add-on. Can be used together with the auto_tagging parameter to apply tags automatically.
          example: coco_v2
        filename_override:
          type: string
          description: Overrides the originally uploaded asset's file name in downloads that use flags like fl_attachment or fl_force_original.
        public_id_prefix:
          type: string
          description: A string or path that's automatically prepended to the public_id with a forward slash. The value can contain the same characters as the public_id including additional forward slashes. This prefix can be useful to provide context and improve the SEO of an asset's filename in the delivery URL, but the value does not impact the location where the asset is stored.
        use_asset_folder_as_public_id_prefix:
          type: boolean
          description: Whether to add the asset_folder value as a prefix to the public_id value (prepended with a forward slash). This ensures that the public ID path will always match the initial asset folder, and can help to retain the behavior that previously existed in fixed folder mode. However, keep in mind that even when this option is used during upload, an asset with a certain public ID path can later be moved to a completely different asset folder hierarchy without impacting the public ID. This option only ensures path matching for the initial upload. Relevant only when public_id_prefix (or folder) has not been separately specified.
        unique_display_name:
          type: boolean
          description: Whether the display name should be unique.
        visual_search:
          type: boolean
          description: Whether to index the image for use with visual searches. Relevant for images only.
        use_filename_as_display_name:
          type: boolean
          description: Whether to automatically assign the original filename of the uploaded asset as the asset's display name. Relevant only if the display_name parameter isn't set.
        use_filename:
          type: boolean
          description: |
            Whether to use the original file name of the uploaded asset if available for the public ID. The file name is normalized and random characters are appended to ensure uniqueness if the file name already exists. Default: false.
        unique_filename:
          type: boolean
          description: |
            When set to false and used together with use_filename, if an asset with the same file name already exists, no random characters are appended to the file name. Instead, the asset is overwritten. Default: true (random characters are added to the file name if needed).
        upload_preset:
          type: string
          description: Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload Presets page of the Console Settings.
        on_success:
          type: string
          description: Allows you to update an asset by specifying custom logic with JavaScript that is executed after the upload to Cloudinary is completed successfully. This can be useful for conditionally adding tags, contextual metadata, and structured metadata, depending on the results of using the detection parameter on upload.
    upload_preset:
      allOf:
        - $ref: '#/components/schemas/upload_explicit_parameters'
        - $ref: '#/components/schemas/upload_other_parameters'
        - type: object
          properties:
            name:
              type: string
              description: The name of the upload preset when creating or modifying an upload preset.
            disallow_public_id:
              type: boolean
              description: |
                When using unsigned upload with an upload preset, this parameter prevents specifying a public ID. Relevant only for unsigned upload presets.
            unsigned:
              type: boolean
              description: Whether the upload preset allows unsigned uploads.
    metadata_field:
      type: object
      properties:
        type:
          type: string
          enum:
            - string
            - integer
            - date
            - enum
            - set
          description: The type of the metadata field.
        external_id:
          type: string
          maxLength: 255
          description: The external ID of the metadata field.
        label:
          type: string
          maxLength: 255
          description: The label of the metadata field.
        mandatory:
          type:
            - boolean
            - 'null'
          description: Whether the metadata field is mandatory.
        default_value:
          type:
            - string
            - integer
            - 'null'
          description: The default value of the metadata field.
        default_disabled:
          type:
            - boolean
            - 'null'
          description: Whether the default value is disabled.
        validation:
          type:
            - object
            - 'null'
          description: The validation defined for the metadata field.
        restrictions:
          type:
            - object
            - 'null'
          description: The restrictions defined for the metadata field.
          properties:
            readonly_ui:
              type: boolean
              description: Whether the metadata field is read-only in the UI. when true, the metadata field can only be updated via the API.
        datasource:
          type:
            - object
            - 'null'
          description: The datasource defined for the metadata field.
          properties:
            values:
              type: array
              items:
                type: object
                properties:
                  external_id:
                    type: string
                    description: The external ID of the option.
                  value:
                    type: string
                    description: The value of the option.
                  position:
                    type: integer
                    description: The position of the option.
                  state:
                    type: string
                    enum:
                      - active
                      - inactive
                    description: The state of the option.
        allow_dynamic_list_values:
          type:
            - boolean
            - 'null'
          description: Whether the metadata field allows adding new options to the datasource dynamically.
      required:
        - type
        - label
    metadata_field_datasource_value:
      type: object
      properties:
        external_id:
          type: string
          description: The external ID of the datasource value.
        value:
          type: string
          description: The value of the option.
    metadata_field_datasource_values_array:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/metadata_field_datasource_value'
    metadata_rule_base:
      type: object
      properties:
        metadata_field_id:
          type: string
          description: The ID of the metadata field this rule applies to.
        name:
          type: string
          description: A descriptive name for the metadata rule.
        condition:
          type: object
          description: The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
        result:
          type: object
          description: The result to apply when the condition is met, should adhere to the metadata rule result schema.
        state:
          type: string
          enum:
            - active
            - inactive
          description: The state of the rule.
        position:
          type: integer
          description: The position/order of this rule relative to other rules.
      example:
        external_id: '1234567890'
        metadata_field_id: abcdefghij
        name: My Rule
        condition:
          metadata_field_id: qrstuvwxyz
          populated: true
        result:
          apply_value:
            value: my value
            mode: default
    metadata_rule_response:
      allOf:
        - $ref: '#/components/schemas/metadata_rule_base'
        - type: object
          properties:
            external_id:
              type: string
              description: The unique identifier of the metadata rule.
            condition_signature:
              type: string
              description: A signature representing the condition structure.
    metadata_rule_create:
      allOf:
        - $ref: '#/components/schemas/metadata_rule_base'
      required:
        - metadata_field_id
        - name
        - condition
        - result
    metadata_rule_update:
      allOf:
        - $ref: '#/components/schemas/metadata_rule_base'
        - type: object
          properties:
            external_id:
              type: string
              description: The unique identifier of the metadata rule.
    upload_mapping:
      type: object
      description: Represents an upload mapping
      properties:
        folder:
          type: string
          description: The folder name
          example: my_folder
        template:
          type: string
          description: The template URL
          example: http://example.com/files
        external_id:
          type: string
          description: Unique identifier for the mapping
        upload_preset_name:
          type:
            - string
            - 'null'
          description: Name of an upload preset if one is associated
      required:
        - folder
        - template
        - external_id
    uri_type:
      type: string
      enum:
        - webhook
        - flow
    trigger_info:
      type: object
      properties:
        id:
          type: string
          example: c2c822dd1aa41ba6d81299df8b5ae949
        product_environment_id:
          type: string
          example: 7fabb2ff3d687d05b63134cf8fa006ba16
        uri_type:
          $ref: '#/components/schemas/uri_type'
          example: webhook
        uri:
          type: string
          format: uri
          example: http://example.com
        event_type:
          type: string
          example: all
        created_at:
          type: string
          format: date-time
          example: '2025-05-13T09:40:29+00:00'
        updated_at:
          type: string
          format: date-time
          example: '2025-05-13T09:40:29+00:00'
      required:
        - uri
        - uri_type
    streaming_profile:
      type: object
      properties:
        external_id:
          type: string
          description: The unique identifier of the streaming profile
          example: f6360c4d-4f62-48b7-b56b-8c49d1bd6dcf
        name:
          type: string
          description: The name of the streaming profile
          example: hd_1080p
        display_name:
          type: string
          description: The display name of the streaming profile
          example: HD 1080p
        predefined:
          type: boolean
          description: Whether this is a predefined streaming profile
          example: false
        representations:
          type: array
          description: The list of representations in the streaming profile
          items:
            type: object
            properties:
              transformation:
                type: array
                description: The transformation parameters for this representation
                items:
                  type: object
                  additionalProperties: true
          example:
            - transformation:
                - width: 1920
                  height: 1080
                  crop: scale
                  video_codec: h264
                  bit_rate: 2500k
                  audio_codec: aac
                  audio_bitrate: 128k
                  fps: 30
            - transformation:
                - width: 1280
                  height: 720
                  crop: scale
                  video_codec: h264
                  bit_rate: 1500k
                  audio_codec: aac
                  audio_bitrate: 128k
                  fps: 30
      required:
        - external_id
        - name
        - predefined
      example:
        external_id: sp_123456789
        name: hd_1080p
        display_name: HD 1080p
        predefined: false
        representations:
          - transformation:
              - width: 1920
                height: 1080
                crop: scale
                video_codec: h264
                bit_rate: 2500k
                audio_codec: aac
                audio_bitrate: 128k
                fps: 30
          - transformation:
              - width: 1280
                height: 720
                crop: scale
                video_codec: h264
                bit_rate: 1500k
                audio_codec: aac
                audio_bitrate: 128k
                fps: 30
    streaming_profile_create:
      type: object
      properties:
        name:
          type: string
          description: The name of the streaming profile
          example: hd_1080p
        display_name:
          type: string
          description: The display name of the streaming profile
          example: HD 1080p
        representations:
          type: string
          description: A JSON string containing the list of representations with transformation parameters as strings
          example: '[{"transformation":"w_1920,h_1080,c_scale/vc_h264,br_2500k/ac_aac,abr_128k/fps_30"},{"transformation":"w_1280,h_720,c_scale/vc_h264,br_1500k/ac_aac,abr_128k/fps_30"}]'
      required:
        - name
        - representations
      example:
        name: hd_1080p
        display_name: HD 1080p
        representations: '[{"transformation":"w_1920,h_1080,c_scale/vc_h264,br_2500k/ac_aac,abr_128k/fps_30"},{"transformation":"w_1280,h_720,c_scale/vc_h264,br_1500k/ac_aac,abr_128k/fps_30"}]'
    streaming_profile_update:
      type: object
      properties:
        display_name:
          type: string
          description: The display name of the streaming profile
          example: HD 1080p Updated
        representations:
          type: string
          description: A JSON string containing the list of representations with transformation parameters as strings
          example: '[{"transformation":"w_1920,h_1080,c_scale/vc_h264,br_3000k/ac_aac,abr_192k/fps_30"},{"transformation":"w_1280,h_720,c_scale/vc_h264,br_2000k/ac_aac,abr_192k/fps_30"}]'
      required:
        - representations
      example:
        display_name: HD 1080p Updated
        representations: '[{"transformation":"w_1920,h_1080,c_scale/vc_h264,br_3000k/ac_aac,abr_192k/fps_30"},{"transformation":"w_1280,h_720,c_scale/vc_h264,br_2000k/ac_aac,abr_192k/fps_30"}]'
x-speakeasy-globals:
  parameters: null
