openapi: 3.1.0
info:
  title: Cloudinary Asset Management API
  version: 0.3.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Cloudinary Support
    email: support@cloudinary.com
    url: https://support.cloudinary.com
  termsOfService: https://cloudinary.com/tou
servers:
  - url: https://{region}.cloudinary.com
    description: Regional API endpoints for optimal performance.
    variables:
      region:
        default: api
        description: Regional endpoint selection
        enum:
          - api
          - api-eu
          - api-ap
  - url: https://{host}
    description: Custom domains for enterprise deployments.
    variables:
      host:
        default: api.cloudinary.com
        description: API host domain.
security:
  - basicAuth: []
  - oauth2:
      - asset_management
      - upload
tags:
  - name: upload
    description: Uploads files to the active product environment.
  - name: assets
    description: Enables you to manage all the resources (assets) stored in your product environment.
  - name: asset_relations
    description: Enables you to manage relationships between assets.
  - name: metadata
    description: Enables you to manage the custom metadata (tags/context/structured metadata) stored with specific assets.
  - name: video_analytics
    description: Gets video analytics
  - name: explode
    description: Generates derived images from a multi-frame/page file.
  - name: tags
    description: Enables you to manage the tags used in your product environment.
  - name: backups
    description: Enables you to manage backup versions.
  - name: folders
    description: Enables you to manage the asset folders in your product environment.
  - name: usage
    description: Gets usage details
  - name: search
    description: APIs for searching resources using text and visual search capabilities
paths:
  /v1_1/{cloud_name}/{resource_type}/upload:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - $ref: '#/components/parameters/upload_resource_type'
    post:
      operationId: upload
      summary: Uploads media assets (images, videos, raw files) to your Cloudinary product environment
      description: |
        Uploads media assets (images, videos, raw files) to your Cloudinary product environment. The file is securely stored 
        in the cloud with backup and revision history. Cloudinary automatically analyzes and saves important data about each 
        asset, such as format, size, resolution, and prominent colors, which is indexed to enable searching on those attributes.

        Supports uploading from:
        - Local file paths (SDKs/MCP server only). For MCP server path MUST start with file://
        - Remote HTTP/HTTPS URLs
        - Base64 Data URIs (max ~60 MB)
        - Private storage buckets (S3 or Google Storage)
        - FTP addresses

        The uploaded asset is immediately available for transformation and delivery upon successful upload.
      tags:
        - upload
      x-speakeasy-mcp:
        name: upload-asset
        scopes:
          - librarian
          - builder
        description: |
          Purpose: Uploads media assets (images, videos, raw files) to your Cloudinary product environment with automatic format detection, metadata extraction, and immediate availability for transformation and delivery.
          Usage: Use this to add new media assets to your cloud storage, whether from local files, remote URLs, Base64 data, or cloud storage buckets. Essential for content management systems, user uploads, and bulk media ingestion workflows.
          Example request: POST with multipart/form-data containing file binary data, or JSON body like {"file": "https://example.com/image.jpg", "public_id": "sample", "folder": "products", "tags": "featured,electronics"}
          Parameters: file(asset to upload - local path (For MCP server path MUST start with file://)/URL/Base64), public_id(custom identifier), folder(organization folder), tags(comma-separated labels), resource_type(image/video/raw), format(convert to specific format), transformation(apply on upload), overwrite(replace existing), notification_url(callback URL), context(key-value metadata), metadata(structured metadata), access_mode(public/authenticated), backup(enable versioning), faces(detect faces), colors(extract colors), quality_analysis(assess quality), auto_tagging(confidence threshold), moderation(content filtering)
          When Not to Use: Don't use for assets that are already in cloud storage (use existing asset operations instead). Avoid for temporary files that don't need permanent storage. Don't use for very large files without chunked upload for files over 100MB.
          Output: Returns comprehensive asset information: public_id(asset identifier), asset_id(unique asset ID), version(version number), resource_type(asset type), format(file format), created_at(upload timestamp), bytes(file size), width/height(dimensions for images/videos), url(public delivery URL), secure_url(HTTPS delivery URL), signature(validation signature), etag(entity tag), original_filename(source filename), tags(assigned tags array), context(metadata object), analysis results (colors, faces, moderation if requested)
          Example output: {"public_id":"sample","asset_id":"abc123def456","version":1234567890,"resource_type":"image","format":"jpg","created_at":"2023-01-15T10:00:00Z","bytes":45231,"width":800,"height":600,"url":"http://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","secure_url":"https://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","signature":"abc123def456","etag":"def789ghi012","original_filename":"photo.jpg","tags":["featured","electronics"],"context":{"category":"product"}}
      requestBody:
        $ref: '#/components/requestBodies/upload_request_body'
      responses:
        '200':
          description: Successful upload
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/upload_response'
                  - $ref: '#/components/schemas/async_upload_response'
        '302':
          description: Redirect to callback URL (when 'callback' parameter is provided and request is not XHR).
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/html_redirect'
        '400':
          description: Bad request (e.g., missing parameters, invalid type, target exists without overwrite)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Not allowed (e.g., insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Asset not found (e.g. when uploading from a remote URL that does not exist)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/upload_chunked:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - $ref: '#/components/parameters/upload_resource_type'
    post:
      operationId: uploadChunk
      summary: Upload a single chunk of a large file
      description: |
        Uploads a single chunk of a large file as part of a chunked upload process. This enables efficient upload of 
        large files with the ability to resume interrupted uploads. Each request uploads one chunk of the file.
        It is required for any files that are larger than 100 MB. This is often relevant for video files, as they 
        tend to have larger file sizes. Minimum chunk size is 5 MB.
      tags:
        - upload
      x-speakeasy-mcp:
        disabled: true
        scopes:
          - librarian
      parameters:
        - name: Content-Range
          in: header
          required: true
          schema:
            type: string
            example: bytes 0-999999/3000000
          description: The range of bytes being uploaded in the current chunk, in the format "bytes start-end/total". For example, "bytes 0-999999/3000000" indicates the first 1MB chunk of a 3MB file.
        - name: X-Unique-Upload-Id
          in: header
          required: true
          schema:
            type: string
            example: 2fd4e1c67a2d28fce
          description: A unique identifier for the upload. Must be the same for all chunks of the same file.
      requestBody:
        $ref: '#/components/requestBodies/upload_request_body'
      responses:
        '200':
          description: Chunk upload successful. For all but the final chunk, this returns upload status. For the final chunk, it returns the complete upload response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/non_final_chunk_upload_response'
                  - $ref: '#/components/schemas/upload_response'
                  - $ref: '#/components/schemas/async_upload_response'
        '302':
          description: Redirect to callback URL (when 'callback' parameter is provided and request is not XHR).
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/html_redirect'
        '400':
          description: Bad request (e.g., invalid Content-Range format, or chunk size below minimum)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Not allowed (e.g., insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/rename:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          description: The type of resource to rename. "image", "video", or "raw".
          enum:
            - image
            - video
            - raw
    post:
      x-speakeasy-mcp:
        name: asset-public_id-rename
        scopes:
          - librarian
        description: |
          Purpose: Changes an existing asset's public ID (identifier) and optionally moves it to a different storage type, effectively renaming or moving the asset while preserving its content and metadata.
          Usage: Use this to rename assets for better organization, move assets between storage types (upload/private/authenticated), or reorganize your media library structure. Essential for maintaining clean naming conventions and evolving organizational systems.
          Example request: {"from_public_id": "old_image", "to_public_id": "products/new_image", "type": "upload", "to_type": "private", "overwrite": false}
          Parameters: from_public_id(current asset identifier), to_public_id(new asset identifier), type(current storage type), to_type(new storage type), overwrite(replace existing asset), invalidate(clear CDN cache), context(update context metadata), metadata(update structured metadata), notification_url(callback URL)
          When Not to Use: Don't use if the asset is actively referenced in applications without updating those references. Avoid renaming during high-traffic periods if the asset is frequently accessed. Don't use for copying assets (this moves, not copies).
          Output: Returns updated asset information: public_id(new identifier), version(version number), signature(validation signature), resource_type(asset type), created_at(creation timestamp), bytes(file size), type(storage type), etag(entity tag)
          Example output: {"public_id":"products/new_image","version":1234567890,"signature":"abc123def456","resource_type":"image","created_at":"2023-01-15T10:00:00Z","bytes":45231,"type":"private","etag":"def789ghi012"}
      summary: Updates an existing asset's identifier and optionally other metadata in your Cloudinary account
      tags:
        - assets
      operationId: renameAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/signature_parameters'
                - type: object
                  properties:
                    from_public_id:
                      type: string
                      description: The public ID of the asset to rename.
                    to_public_id:
                      type: string
                      description: The new public ID for the asset.
                    type:
                      type: string
                      enum:
                        - upload
                        - private
                        - authenticated
                      description: The storage type of the asset. Defaults to 'upload'.
                    to_type:
                      type: string
                      enum:
                        - upload
                        - private
                        - authenticated
                      description: The new storage type for the asset.
                    overwrite:
                      type: boolean
                      description: Whether to overwrite the target asset if it already exists.
                    invalidate:
                      type: boolean
                      description: Whether to invalidate the CDN cache for the renamed asset.
                    context:
                      type: string
                      description: Context metadata to update during rename.
                    metadata:
                      type: string
                      description: Structured metadata to update during rename.
                    notification_url:
                      type: string
                      description: URL to notify when the operation is complete.
                  required:
                    - from_public_id
                    - to_public_id
      responses:
        '200':
          description: Asset renamed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
        '400':
          description: Bad request (e.g., missing parameters, invalid type, target exists without overwrite)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Source asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/download:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - $ref: '#/components/parameters/resource_type'
    get:
      x-speakeasy-mcp:
        name: download-asset
        scopes:
          - admin
        description: |
          Purpose: Downloads an asset (with optional transformation) through Cloudinary's secure download API, often used for authenticated access or to apply transformations during download.
          Usage: Use this when you need to programmatically download assets with authentication, apply transformations during download, or track download activities. Particularly useful for private/authenticated assets or when you need to transform before download.
          Example request: GET /image/download?public_id=sample&format=jpg&transformation=w_300,h_200,c_crop&api_key=your_key&signature=abc123&timestamp=1234567890
          Parameters: public_id(asset identifier), resource_type(image/video/raw), format(convert to specific format), transformation(apply transformation), type(upload/private/authenticated), attachment(force download), expires_at(expiration timestamp), target_filename(custom filename), api_key(authentication), signature(security signature), timestamp(for signature)
          When Not to Use: Don't use for regular asset delivery (use direct CDN URLs instead). Avoid for high-volume traffic as this bypasses CDN caching. Not needed for public assets unless transformation is required.
          Output: Returns the binary asset data directly as the response body with appropriate Content-Type headers and optional Content-Disposition for attachments.
          Example output: Binary asset data with headers like Content-Type: image/jpeg, Content-Length: 45231, Content-Disposition: attachment; filename="sample.jpg"
      summary: Generates a download link for a specific asset (image)
      tags:
        - assets
      operationId: downloadAsset
      parameters:
        - name: public_id
          in: query
          required: true
          schema:
            type: string
          description: The public ID of the asset to download.
        - name: format
          in: query
          required: false
          schema:
            type: string
          description: The format to convert the asset to before downloading.
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
            default: upload
          description: The storage type of the asset. Defaults to 'upload'.
        - name: expires_at
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: Unix timestamp indicating when the download URL should expire.
        - name: attachment
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to force download as an attachment.
        - name: target_filename
          in: query
          required: false
          schema:
            type: string
          description: The desired filename for the downloaded file.
        - name: transformation
          in: query
          required: false
          schema:
            type: string
          description: A transformation to apply to the asset before downloading.
        - name: api_key
          in: query
          required: true
          schema:
            type: string
        - name: signature
          in: query
          required: true
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Asset downloaded successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
            video/*:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (e.g., missing parameters, invalid format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden (e.g., insufficient permissions for private assets)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/destroy:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          enum:
            - image
            - video
            - raw
        description: The type of asset/resource to destroy
      - name: public_id
        in: query
        required: true
        schema:
          type: string
        description: The public ID of the asset/resource to destroy
      - name: invalidate
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Whether to invalidate CDN cached copies of the asset
    post:
      operationId: destroyAsset
      summary: Destroys an asset/resource
      tags:
        - upload
      responses:
        '200':
          description: Asset/resource destroyed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                    description: Indicates successful deletion
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Asset/resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/explode:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          description: The type of resource to explode. only "image"
          enum:
            - image
    post:
      summary: Create derived images from multi-page file
      description: Generates derived images for each of the individual pages/frames in a multi-page/frame file (such as a PDF or animated image).
      tags:
        - explode
      operationId: explodeResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public_id:
                  type: string
                  description: The public ID of the PDF or animated image to generate from.
                format:
                  type: string
                  description: 'The format for the generated derived images. Default: png'
                transformation:
                  type: string
                  description: The transformation to apply. Must contain exactly one pg_all transformation parameter.
                signature:
                  type: string
                  description: Used to authenticate the request and based on the parameters you use in the request. Use it if you manually generate your own signed POST request.
                notification_url:
                  type: string
                  format: uri
                  description: The webhook URL to notify when the operation is complete.
                type:
                  type: string
                  enum:
                    - upload
                    - private
                    - authenticated
                  description: 'description: The delivery type of the asset. Default: upload'
              required:
                - public_id
                - transformation
                - signature
      responses:
        '200':
          description: Explode operation started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - processing
                    description: The status of the explode operation.
                  batch_id:
                    type: string
                    description: The ID of the batch operation.
        '400':
          description: Bad request (e.g., missing pg_all parameter, invalid transformation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/explicit:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          description: The type of resource to apply operations on. "image" for images, "video" for videos, or "raw" for non-media files.
          enum:
            - image
            - video
            - raw
    post:
      summary: Apply operations on an existing asset
      description: |
        Applies actions such as transformations, tags, or metadata updates to an existing asset without re-uploading it.
        This is useful for applying new transformations, adding tags, or updating metadata on assets that are already in your cloud.
      tags:
        - assets
      operationId: explicitAsset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/signature_parameters'
                - $ref: '#/components/schemas/upload_explicit_parameters'
                - type: object
                  properties:
                    public_id:
                      type: string
                      description: The public ID of the existing asset to apply operations on.
                    type:
                      type: string
                      enum:
                        - upload
                        - private
                        - authenticated
                        - fetch
                      description: The storage type of the asset. Defaults to 'upload'.
                  required:
                    - public_id
                - type: object
                  properties:
                    overwrite:
                      type: boolean
                      description: |
                        When applying eager for already existing video transformations, this setting indicates whether to force the existing derived video resources to be regenerated. Default for videos: false.
                        Note: When specifying existing eager transformations for images, corresponding derived images are always regenerated.
                    quality_override:
                      description: Override the quality setting for this asset.
                      oneOf:
                        - type: string
                        - type: integer
      responses:
        '200':
          description: Operations applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
        '400':
          description: Bad request (e.g., missing parameters, invalid type)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden (e.g., insufficient permissions for private assets)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/generate_archive:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          description: The type of resources to include in the archive. "image" for images, "video" for videos, "raw" for non-media files, or "all" for mixed types.
          enum:
            - image
            - video
            - raw
            - all
    post:
      x-speakeasy-mcp:
        name: generate-archive
        scopes:
          - librarian
        description: |
          Purpose: Creates an archive (ZIP or TGZ file) that contains a set of assets from your Cloudinary product environment, either for download or storage as a new asset.
          Usage: Use this to bundle multiple assets for download, backup, content packages, or distribution. Supports selecting assets by public IDs, tags, or prefixes, with optional transformations applied before archiving.
          Example request: {"public_ids": ["sample1", "sample2"], "target_format": "zip", "mode": "create_and_download", "transformations": "w_300,h_300", "target_public_id": "my_package", "timestamp": 1234567890, "signature": "abc123", "api_key": "your_key"}
          Parameters: public_ids(array of asset IDs), tags(select by tags), prefixes(select by prefix), type(upload/private/authenticated), transformations(apply before archiving), mode(download/create/create_and_download), target_format(zip/tgz), target_public_id(archive name), flatten_folders(flatten structure), allow_missing(ignore missing assets), expires_at(download expiration), use_original_filename(use original names), async(background processing), notification_url(completion webhook), target_tags(archive tags), keep_derived(preserve transformations), timestamp(signature timestamp), signature(authentication), api_key(account key)
          When Not to Use: Don't use for single asset downloads (use direct URLs). Avoid for extremely large collections that create oversized archives. Not suitable for real-time operations requiring immediate response.
          Output: Returns archive details (create mode) or binary archive data (download mode). Includes asset_id, secure_url, bytes, resource_count, file_count for created archives.
          Example output: {"asset_id":"abc123","public_id":"my_package.zip","version":1234567890,"secure_url":"https://res.cloudinary.com/demo/raw/upload/v1234567890/my_package.zip","bytes":1024000,"resource_count":2,"file_count":2}
      summary: Creates an archive (ZIP or TGZ file) that contains a set of assets from
      description: Creates a downloadable ZIP or other archive format containing the specified resources.
      tags:
        - assets
      operationId: generateArchive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/signature_parameters'
                - type: object
                  properties:
                    public_ids:
                      type: array
                      items:
                        type: string
                      description: The list of public IDs to include in the archive. Up to 1000 public IDs are supported.
                    tags:
                      type: array
                      items:
                        type: string
                      description: A tag to use for selecting assets to include in the archive. Up to 20 tags are supported.
                    prefixes:
                      type: array
                      items:
                        type: string
                      description: Select all assets where the public ID starts with this prefix. Up to 20 prefixes are supported.
                    type:
                      type: string
                      enum:
                        - upload
                        - private
                        - authenticated
                        - fetch
                      description: The specific file type of assets to include in the archive. Not applicable when "resource_type" is "all".
                    transformations:
                      type: string
                      description: The transformations to apply to the assets before including them in the archive (separated by "|").
                    mode:
                      type: string
                      enum:
                        - download
                        - create
                        - create_and_download
                      default: create
                      description: |
                        The method for generating and delivering the archive. Options:
                        download - Generates and delivers the archive file without storing it
                        create - Creates and stores the archive as a raw asset, returning URLs in the response
                        create_and_download - Creates, stores, and delivers the archive file
                    target_format:
                      type: string
                      enum:
                        - zip
                        - tgz
                      default: zip
                      description: The format of the generated archive.
                    target_public_id:
                      type: string
                      description: The public ID to assign to the generated archive, or the filename of the downloaded archive file.
                    target_asset_folder:
                      type: string
                      description: The folder in your product environment where the generated archive should be stored.
                    flatten_folders:
                      type: boolean
                      description: Whether to flatten all files to be in the root of the archive file.
                      default: false
                    flatten_transformations:
                      type: boolean
                      description: Whether to flatten the folder structure of the derived assets.
                      default: false
                    skip_transformation_name:
                      type: boolean
                      description: Whether to skip adding the transformation details to the file names in the archive.
                      default: false
                    allow_missing:
                      type: boolean
                      description: Whether to allow missing assets in the archive. If false, the operation will fail if any asset is not found.
                      default: false
                    expires_at:
                      type: integer
                      format: int64
                      description: ("download" mode only) Unix timestamp indicating when the generated archive URL should expire.
                    use_original_filename:
                      type: boolean
                      description: Whether to use the original filenames of the assets in the archive instead of public IDs (when available).
                      default: false
                    async:
                      type: boolean
                      description: ("create" mode only), specifies whether to generate the archive asynchronously.
                      default: false
                    notification_url:
                      type: string
                      description: ("create" mode only), specifies the URL to notify when the archive generation is complete.
                    target_tags:
                      type: array
                      items:
                        type: string
                      description: A list of tag names to assign to the generated archive.
                      example:
                        - animal
                        - dog
                    keep_derived:
                      type: boolean
                      description: Whether to keep the derived assets used for generating the archive.
                      default: false
      responses:
        '200':
          description: Archive successfully generated or downloaded
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                properties:
                  asset_id:
                    type: string
                    description: The unique identifier of the generated archive in the Cloudinary system.
                  public_id:
                    type: string
                    description: The public ID of the generated archive.
                  version:
                    type: integer
                    description: The version number of the generated archive.
                  version_id:
                    type: string
                    description: The unique identifier of this version of the generated archive.
                  resource_type:
                    type: string
                    description: The type of resource. Always "raw" for generated archives.
                  created_at:
                    type: string
                    format: date-time
                    description: The timestamp when the archive was generated.
                  tags:
                    type: array
                    items:
                      type: string
                    description: The tags assigned to the generated archive.
                  bytes:
                    type: integer
                    description: The size of the generated archive in bytes.
                  type:
                    type: string
                    description: The resource type of the generated archive.
                  url:
                    type: string
                    description: The HTTP URL for downloading the generated archive.
                  secure_url:
                    type: string
                    description: The HTTPS URL for downloading the generated archive.
                  folder:
                    type: string
                    description: The folder where the archive is stored (only for product environments with Dynamic Folders disabled)
                    deprecated: true
                    x-speakeasy-deprecation-message: |
                      If Dynamic folders mode is enabled on your product environment, this parameter is deprecated, and it's recommended to use the asset_folder parameter.
                  resource_count:
                    type: integer
                    description: The number of unique resources included in the archive.
                  file_count:
                    type: integer
                    description: The total number of files in the archive.
                  asset_folder:
                    type: string
                    description: The folder in your product environment where the archive is stored.
                  display_name:
                    type: string
                    description: The display name of the generated archive.
                  missing_public_ids:
                    type: array
                    items:
                      type: string
                    description: The list of public IDs that were requested but not found.
                  empty_tags:
                    type: array
                    items:
                      type: string
                    description: The list of tags that were requested but returned no results.
                  empty_prefixes:
                    type: array
                    items:
                      type: string
                    description: The list of prefixes that were requested but returned no results.
                example:
                  asset_id: 3cd9f196fe3ee1882c0f66223bc568f9
                  public_id: atufggsrkjjefdsy90nr.zip
                  version: 1747234673
                  version_id: 42f240f70d86aab6e9249fe5b664c237
                  signature: 689ea4a513604414f44f0d779fc7d049bbdad6d2
                  resource_type: raw
                  created_at: '2025-05-14T14:57:53Z'
                  tags: []
                  bytes: 3574651
                  type: upload
                  etag: 47ac8d2c1b74ac107937d6e9181dd047
                  placeholder: false
                  url: http://res.cloudinary.com/customerafdb058c4adc/raw/upload/v1747234673/atufggsrkjjefdsy90nr.zip
                  secure_url: https://res.cloudinary.com/customerafdb058c4adc/raw/upload/v1747234673/atufggsrkjjefdsy90nr.zip
                  asset_folder: ''
                  display_name: koetjd3qrme0cfcfnjet.zip
                  resource_count: 6
                  file_count: 6
        '400':
          description: Bad request (e.g., missing parameters, invalid format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/download_backup:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    get:
      x-speakeasy-mcp:
        name: download-asset-backup
        scope:
          - advanced_librarian
      summary: Download a backup copy of an asset
      tags:
        - assets
      operationId: downloadBackupAsset
      parameters:
        - name: asset_id
          in: query
          required: true
          schema:
            type: string
            pattern: ^[0-9a-f]{32}$
            example: f4e6579cf84dd9cf5683b21f5b30c7d9
          description: The asset ID of the backup to download. Must be a 32-character hexadecimal string.
        - name: version_id
          in: query
          required: true
          schema:
            type: string
            pattern: ^[0-9a-f]{32}$
            example: a3978316b0045e5eaf198f4d6885ca35
          description: The version ID of the backup to download. Must be a 32-character hexadecimal string.
        - name: api_key
          in: query
          required: true
          schema:
            type: string
          description: The API key for authentication.
        - name: signature
          in: query
          required: true
          schema:
            type: string
          description: The request signature.
        - name: timestamp
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: The request timestamp.
      responses:
        '200':
          description: Asset backup downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            image/*:
              schema:
                type: string
                format: binary
            video/*:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        description: A problem with one of the parameters or timestamp.
                      http_code:
                        type: integer
                        description: The HTTP status code.
                        example: 400
              examples:
                illegal_id:
                  summary: Invalid or non-existent asset_id/version_id
                  value:
                    error:
                      message: Illegal id
                      http_code: 400
                missing_version_id:
                  summary: Missing version_id parameter
                  value:
                    error:
                      message: Missing required parameter - version_id
                      http_code: 400
                missing_asset_id:
                  summary: Missing asset_id parameter
                  value:
                    error:
                      message: Missing required parameter - asset_id
                      http_code: 400
                stale_request:
                  summary: Request timestamp is too old
                  value:
                    error:
                      message: Stale request - reported time is {timestamp} which is more than 1 hour ago
                      http_code: 400
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Invalid Signature or timestamp expired.
                        example: Invalid Signature abc123. String to sign - 'timestamp=1234567890&api_key=12345'.
                      http_code:
                        type: integer
                        description: The HTTP status code.
                        example: 401
              examples:
                invalid_signature:
                  summary: Invalid signature with signing string
                  value:
                    error:
                      message: Invalid Signature {signature}. String to sign - '{parameters}'.
                      http_code: 401
                expired_timestamp:
                  summary: Request has expired
                  value:
                    error:
                      message: Request timestamp expired
                      http_code: 401
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Specified version does not exist
  /v1_1/{cloud_name}/asset/destroy:
    post:
      x-speakeasy-mcp:
        name: delete-asset
        scopes:
          - admin
        description: |
          Purpose: Permanently deletes a media asset from your Cloudinary account using its unique asset identifier. This operation removes the asset from storage, invalidates CDN caches, and cleans up any derived assets or transformations associated with the original asset.
          Usage: Use when you need to permanently remove assets that are no longer needed, comply with data retention policies, or manage storage quotas. Essential for content management workflows such as removing outdated marketing materials, deleting test uploads, or handling user-requested content deletion.
          Example request: {"asset_id": "fa4272ac98d1400f2982fada9dd5a8cf", "invalidate": true, "timestamp": 1749416056, "signature": "71d37b1b636a61c42c2d5b9f17139cac47e67906", "api_key": "123456789"}
          Note: The signature must be generated by concatenating parameters in alphabetical order and appending the API secret. For example: "asset_id=abc123&invalidate=true&timestamp=1234567$API_SECRET"
          Parameters - examples of parameters that can be used: asset_id(unique identifier of the asset to delete), invalidate(boolean to purge CDN cache), timestamp(current Unix timestamp), signature(SHA-1 hash of ordered parameters with API secret), api_key(your account API key), notification_url(webhook for deletion confirmation), resource_type(specify asset type - defaults to determined by asset_id)
          When Not to Use: Don't use for temporary asset hiding (use access_mode changes instead), versioning control (use versions API), or when you need to maintain asset history. For bulk deletions of multiple assets, use the bulk deletion API instead of multiple single-asset delete calls.
          Output: Returns a simple confirmation object indicating success or a detailed error message for failures. Success response: {"result": "ok"}. Error response example: {"error": {"message": "Invalid Signature. String to sign - 'asset_id=xyz&invalidate=true&timestamp=123'"}}
          Example output: {"result": "ok"}
      summary: Delete asset by asset-id
      description: |
        Deletes an asset using its asset ID. This endpoint replaces the legacy /resources/by_asset_id endpoint.
        Returns the deletion status and asset folder information when folder decoupling is enabled.
      tags:
        - assets
      operationId: destroyByAssetId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/destroy_request'
      responses:
        '200':
          description: Resource successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroy_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/{resource_type}/text:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: resource_type
        in: path
        required: true
        schema:
          type: string
          description: The type of resource to create. Must be "image" for text generation.
          enum:
            - image
    post:
      summary: Create image from text
      description: Dynamically generates an image from a specified text string.
      tags:
        - upload
      operationId: text
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text string to generate an image for.
                public_id:
                  type: string
                  description: The identifier that is used for accessing the generated image. If not specified, a unique identifier is generated.
                font_family:
                  type: string
                  description: The name of the font family.
                font_size:
                  type: integer
                  description: Font size in points.
                  default: 12
                font_color:
                  type: string
                  description: Name or RGB representation of the font's color (e.g., red or
                  default: black
                text_align:
                  type: string
                  description: Text alignment (left, center, right, justify).
                  enum:
                    - left
                    - center
                    - right
                    - justify
                font_weight:
                  type: string
                  description: Whether to use a normal or bold font.
                  default: normal
                  enum:
                    - normal
                    - bold
                font_style:
                  type: string
                  description: Whether to use a normal or italic font.
                  default: normal
                  enum:
                    - normal
                    - italic
                background:
                  type: string
                  description: Name or RGB representation of the background color (e.g., red or
                  default: transparent
                opacity:
                  type: integer
                  description: Text opacity value between 0 (invisible) and 100.
                  default: 100
                  minimum: 0
                  maximum: 100
                text_decoration:
                  type: string
                  description: Text decoration style.
                  default: none
                  enum:
                    - none
                    - underline
                line_spacing:
                  type: integer
                  description: The spacing between lines of text in pixels.
              required:
                - text
      responses:
        '200':
          description: Text image created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  asset_id:
                    type: string
                    description: The unique identifier of the asset.
                  public_id:
                    type: string
                    description: The public identifier of the asset.
                  version:
                    type: integer
                    description: The version number of the asset.
                  version_id:
                    type: string
                    description: The version identifier of the asset.
                  signature:
                    type: string
                    description: The signature for the asset.
                  width:
                    type: integer
                    description: The width of the generated image in pixels.
                  height:
                    type: integer
                    description: The height of the generated image in pixels.
                  format:
                    type: string
                    description: The format of the generated image.
                  resource_type:
                    type: string
                    description: The type of resource (image).
                  created_at:
                    type: string
                    format: date-time
                    description: The creation timestamp.
                  tags:
                    type: array
                    items:
                      type: string
                    description: Array of tags assigned to the asset.
                  pages:
                    type: integer
                    description: Number of pages in the asset.
                  bytes:
                    type: integer
                    description: Size of the asset in bytes.
                  type:
                    type: string
                    description: The storage type of the asset.
                  etag:
                    type: string
                    description: The ETag of the asset.
                  placeholder:
                    type: boolean
                    description: Whether the asset is a placeholder.
                  url:
                    type: string
                    description: The HTTP URL for accessing the asset.
                  secure_url:
                    type: string
                    description: The HTTPS URL for accessing the asset.
                  display_name:
                    type: string
                    description: The display name of the asset.
                  access_mode:
                    type: string
                    description: The access mode of the asset.
                  access_control:
                    type: array
                    items:
                      type: object
                    description: Access control settings for the asset.
                  regions:
                    type: array
                    items:
                      type: object
                    description: Region information for the asset.
                  moderation:
                    type: object
                    description: Moderation information for the asset.
                  info:
                    type: object
                    description: Additional information about the asset.
                required:
                  - asset_id
                  - public_id
                  - version
                  - version_id
                  - signature
                  - width
                  - height
                  - format
                  - resource_type
                  - created_at
                  - bytes
                  - type
                  - url
                  - secure_url
        '400':
          description: Bad request (e.g., missing required parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources:
    get:
      summary: Get resource types
      description: Returns a list of all resource types that correspond to assets currently in your product environment.
      tags:
        - assets
      operationId: listResourceTypes
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      responses:
        '200':
          description: The list of resource types.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resource_types:
                    type: array
                    description: The list of available resource types.
                    items:
                      type: string
                      enum:
                        - image
                        - raw
                        - video
                      x-enum-descriptions:
                        - Image files (jpg, png, gif, etc.).
                        - Raw files (documents, text files, etc.).
                        - Video files (mp4, webm, etc.).
                    example:
                      - image
                      - raw
                      - video
        '401':
          description: Authentication failed.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/api_error'
                  - example:
                      error:
                        message: Invalid credentials
  /v1_1/{cloud_name}/resources/image:
    get:
      x-speakeasy-mcp:
        name: list-images
        scopes:
          - librarian
        description: |
          Purpose: Retrieves a paginated list of image assets from your Cloudinary account with comprehensive filtering and sorting options. This endpoint provides detailed information about your image inventory including metadata, transformations, and delivery URLs.
          Usage: Use this to browse your image library, implement asset management interfaces, search for specific images, or audit your image collection. Essential for building media galleries, asset browsers, and content management systems.
          Example request: GET /resources/image?prefix=products&tags=true&max_results=50&fields=asset_folder,tags,context
          Parameters: type(storage type for filtering - upload/private/authenticated/fetch/list), prefix(filter by public ID prefix), public_ids(specific image identifiers to retrieve), tags(include tag information), next_cursor(pagination token), max_results(limit response size 1-500), direction(sort direction asc/desc), start_at(filter by upload timestamp), fields(specify response fields)
          When Not to Use: Don't use for single asset retrieval (use get-asset-details instead), real-time asset status checks, or when you need video/raw assets (use list-videos or list-files respectively).
          Output: Returns paginated list of image assets: resources(array of image objects), next_cursor(pagination token), rate_limit_allowed(API rate limit), rate_limit_remaining(remaining calls), rate_limit_reset_at(reset timestamp). Each image object contains: asset_id, public_id, format, version, width, height, bytes, url, secure_url, created_at, asset_folder, tags, context
          Example output: {"resources":[{"asset_id":"abc123","public_id":"sample","format":"jpg","version":1234567890,"width":1000,"height":800,"bytes":245032,"url":"http://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","secure_url":"https://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","created_at":"2023-01-15T10:30:00Z","asset_folder":"products","tags":["featured","new"]}],"next_cursor":"xyz789"}
      summary: Get image assets
      description: |
        Retrieves a list of image assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
      tags:
        - assets
      operationId: listImages
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
              - fetch
              - list
          description: The storage type of the assets. Necessary for prefix filtering.
        - name: prefix
          in: query
          required: false
          schema:
            type: string
          description: Find resources with a public ID prefix. Requires the `type` parameter.
        - name: public_ids
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
            maxItems: 100
          description: An array of public IDs to return.
        - name: tags
          in: query
          required: false
          schema:
            type: boolean
          description: 'Whether to include the list of tag names assigned to each asset. Default: false'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
        - name: start_at
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Retrieve resources uploaded after this timestamp.
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/video:
    get:
      x-speakeasy-mcp:
        name: list-videos
        scopes:
          - librarian
        description: |
          Purpose: Retrieves a paginated list of video assets from your Cloudinary account with comprehensive filtering and sorting capabilities. This endpoint provides detailed video metadata including duration, bitrate, codecs, and delivery URLs for streaming and download.
          Usage: Use this to browse your video library, build video management interfaces, search for specific videos, or analyze your video collection. Essential for creating video galleries, media management dashboards, and video content organization systems.
          Example request: GET /resources/video?prefix=marketing&tags=true&max_results=25&fields=asset_folder,duration,bitrate
          Parameters: type(delivery type for filtering - upload/private/authenticated/fetch/list), prefix(filter by public ID prefix), public_ids(specific video identifiers to retrieve), tags(include tag information), next_cursor(pagination token), max_results(limit response size 1-500), direction(sort direction asc/desc), start_at(filter by upload timestamp), fields(specify response fields)
          When Not to Use: Don't use for single video retrieval (use get-asset-details instead), real-time transcoding status checks, or when you need image/raw assets (use list-images or list-files respectively).
          Output: Returns paginated list of video assets: resources(array of video objects), next_cursor(pagination token), rate_limit_allowed(API rate limit), rate_limit_remaining(remaining calls), rate_limit_reset_at(reset timestamp). Each video object contains: asset_id, public_id, format, version, width, height, duration, bitrate, bytes, url, secure_url, created_at, asset_folder, tags, context
          Example output: {"resources":[{"asset_id":"def456","public_id":"promo_video","format":"mp4","version":1234567890,"width":1920,"height":1080,"duration":120.5,"bitrate":2500000,"bytes":38400000,"url":"http://res.cloudinary.com/demo/video/upload/v1234567890/promo_video.mp4","secure_url":"https://res.cloudinary.com/demo/video/upload/v1234567890/promo_video.mp4","created_at":"2023-01-15T14:20:00Z","asset_folder":"marketing","tags":["featured","2023"]}],"next_cursor":"abc456"}
      summary: Get video assets
      description: |
        Retrieves a list of video assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
      tags:
        - assets
      operationId: listVideos
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
              - fetch
              - list
          description: The delivery type. Necessary for prefix filtering.
        - name: prefix
          in: query
          required: false
          schema:
            type: string
          description: A public_id prefix. When specified, all assets with that prefix are returned. When using this, the `type` parameter must also be specified.
        - name: public_ids
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
            maxItems: 100
          description: An array of public IDs to return.
        - name: tags
          in: query
          required: false
          schema:
            type: boolean
          description: 'Whether to include the list of tag names assigned to each asset. Default: false'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
        - name: start_at
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: An ISO-8601 formatted timestamp. When specified, assets created since that timestamp are returned.  Supported only if neither `prefix` nor `public_ids` were passed.
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/raw:
    get:
      x-speakeasy-mcp:
        name: list-files
        scopes:
          - librarian
        description: |
          Purpose: Retrieves a paginated list of raw (non-media) assets from your Cloudinary account including documents, archives, data files, and other non-image/video content. This endpoint provides comprehensive metadata about your file inventory and delivery URLs.
          Usage: Use this to browse your document library, manage file assets, search for specific documents, or audit your raw file collection. Essential for building document management systems, file browsers, and content organization tools.
          Example request: GET /resources/raw?prefix=documents&tags=true&max_results=100&fields=asset_folder,format,bytes
          Parameters: type(delivery type for filtering - upload/private/authenticated/list), prefix(filter by public ID prefix), public_ids(specific file identifiers to retrieve), tags(include tag information), next_cursor(pagination token), max_results(limit response size 1-500), direction(sort direction asc/desc), start_at(filter by upload timestamp), fields(specify response fields)
          When Not to Use: Don't use for single file retrieval (use get-asset-details instead), real-time file processing status, or when you need image/video assets (use list-images or list-videos respectively).
          Output: Returns paginated list of raw file assets: resources(array of file objects), next_cursor(pagination token), rate_limit_allowed(API rate limit), rate_limit_remaining(remaining calls), rate_limit_reset_at(reset timestamp). Each file object contains: asset_id, public_id, format, version, bytes, url, secure_url, created_at, asset_folder, tags, context
          Example output: {"resources":[{"asset_id":"ghi789","public_id":"user_manual","format":"pdf","version":1234567890,"bytes":2048576,"url":"http://res.cloudinary.com/demo/raw/upload/v1234567890/user_manual.pdf","secure_url":"https://res.cloudinary.com/demo/raw/upload/v1234567890/user_manual.pdf","created_at":"2023-01-15T16:45:00Z","asset_folder":"documents","tags":["manual","v2.0"]}],"next_cursor":"def789"}
      summary: Get raw assets
      description: |
        Retrieves a list of raw assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
      tags:
        - assets
      operationId: listRawFiles
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
              - list
          description: The delivery type. Necessary for prefix filtering.
        - name: prefix
          in: query
          required: false
          schema:
            type: string
          description: A public_id prefix. When specified, all assets with that prefix are returned. When using this, the `type` parameter must also be specified.
        - name: public_ids
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
            maxItems: 100
          description: An array of public IDs to return.
        - name: tags
          in: query
          required: false
          schema:
            type: boolean
          description: 'Whether to include the list of tag names assigned to each asset. Default: false'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
        - name: start_at
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: An ISO-8601 formatted timestamp. When specified, assets created since that timestamp are returned.  Supported only if neither `prefix` nor `public_ids` were passed.
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/by_asset_folder:
    get:
      summary: Get resources by asset folder
      description: Retrieves a list of resources within a specific asset folder. Requires folder decoupling to be enabled.
      tags:
        - assets
      operationId: listResourcesByAssetFolder
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_folder
          in: query
          required: true
          schema:
            type: string
          description: The full path of the asset folder.
        - name: resource_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - image
              - video
              - raw
          description: Filter by resource type within the folder.
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Asset folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/by_asset_ids:
    get:
      summary: Get resources by asset IDs
      description: Retrieves details for specific resources using their asset IDs (or external IDs).
      tags:
        - assets
      operationId: listResourcesByAssetIDs
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_ids
          in: query
          required: true
          explode: false
          schema:
            type: array
            items:
              type: string
            maxItems: 100
          description: List of asset IDs to retrieve (max 100).
        - name: resource_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - image
              - video
              - raw
          description: Resource type (optional, can sometimes disambiguate).
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: One or more asset IDs not found (partial success possible)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/{resource_type}/context:
    get:
      summary: Get resources by context
      description: Retrieves resources matching specific context key/value pairs.
      tags:
        - assets
      operationId: listResourcesByContext
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: key
          in: query
          required: true
          schema:
            type: string
          description: Context key to filter by.
        - name: value
          in: query
          required: false
          schema:
            type: string
          description: Context value to filter by.
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/fields_spec'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/{resource_type}/moderations/{moderation_kind}/{moderation_status}:
    get:
      summary: Get resources by moderation kind and status
      description: Retrieves resources matching specific moderation kind and status.
      tags:
        - assets
        - moderations
      operationId: listResourcesByModerationKindAndStatus
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: moderation_kind
          in: path
          required: true
          schema:
            type: string
            enum:
              - manual
              - webpurify
              - aws_rek
              - aws_rek_video
              - perception_point
              - google_video_moderation
              - duplicate
        - name: moderation_status
          in: path
          required: true
          schema:
            type: string
            enum:
              - approved
              - rejected
              - pending
              - queued
              - aborted
        - $ref: '#/components/parameters/fields_spec'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
        - $ref: '#/components/parameters/direction'
      responses:
        '200':
          description: List of resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/restore:
    post:
      summary: Restore assets
      description: Restores one or more resources from backup using their asset IDs. Can optionally specify versions to restore.
      tags:
        - assets
      operationId: restoreResourcesByAssetIDs
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - asset_ids
              properties:
                asset_ids:
                  type: array
                  items:
                    type: string
                  description: The unique and immutable asset IDs of backed up assets to restore.
                  maxItems: 100
                  example:
                    - 2262b0b5eb88f1fd7724e29b0e57d730
                    - d23c0526e6feca2c343e40c2fce5231a
                versions:
                  type: array
                  items:
                    type: string
                  description: The version of each asset to restore. Must match length of asset_ids if provided.
                  example:
                    - c3fe4be5921eb89acd9af738c892f654
                    - d214063097a43d1d1293db61a397f60f
                notification_url:
                  type: string
                  format: uri
                  description: The URL that will receive notification when restore is complete.
                  example: https://example.com/webhook
            examples:
              basic_restore:
                value:
                  asset_ids:
                    - 2262b0b5eb88f1fd7724e29b0e57d730
                    - d23c0526e6feca2c343e40c2fce5231a
                summary: Basic restore of latest versions
              restore_specific_versions:
                value:
                  asset_ids:
                    - 2262b0b5eb88f1fd7724e29b0e57d730
                    - d23c0526e6feca2c343e40c2fce5231a
                  versions:
                    - c3fe4be5921eb89acd9af738c892f654
                    - d214063097a43d1d1293db61a397f60f
                summary: Restore specific versions
              restore_with_notification:
                value:
                  asset_ids:
                    - 2262b0b5eb88f1fd7724e29b0e57d730
                  notification_url: https://example.com/webhook
                summary: Restore with notification
      responses:
        '200':
          description: Resources restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restore_response'
              examples:
                successful_restore:
                  summary: Successful restore of multiple assets
                  value:
                    2262b0b5eb88f1fd7724e29b0e57d730:
                      asset_id: 2262b0b5eb88f1fd7724e29b0e57d730
                      public_id: sample
                      format: jpg
                      version: 1312461204
                      resource_type: image
                      type: upload
                      created_at: '2017-08-04T12:33:24Z'
                      bytes: 120253
                      width: 864
                      height: 576
                      url: http://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg
                      secure_url: https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg
                    d23c0526e6feca2c343e40c2fce5231a:
                      asset_id: d23c0526e6feca2c343e40c2fce5231a
                      public_id: coffee
                      format: jpg
                      version: 1312461205
                      resource_type: image
                      type: upload
                      created_at: '2017-08-04T12:35:25Z'
                      bytes: 85641
                      width: 640
                      height: 480
                      url: http://res.cloudinary.com/demo/image/upload/v1312461205/coffee.jpg
                      secure_url: https://res.cloudinary.com/demo/image/upload/v1312461205/coffee.jpg
                mixed_restore_results:
                  summary: Mixed results with successful and failed restores
                  value:
                    2262b0b5eb88f1fd7724e29b0e57d730:
                      asset_id: 2262b0b5eb88f1fd7724e29b0e57d730
                      public_id: sample
                      format: jpg
                      version: 1312461204
                      resource_type: image
                      type: upload
                      created_at: '2017-08-04T12:33:24Z'
                      bytes: 120253
                      width: 864
                      height: 576
                      url: http://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg
                      secure_url: https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg
                    d23c0526e6feca2c343e40c2fce5231a:
                      error: no_backup
                    invalid_asset_id:
                      error: failed
                all_failed_restore:
                  summary: All assets failed to restore
                  value:
                    d23c0526e6feca2c343e40c2fce5231a:
                      error: no_backup
                    f45e7890abc123def456:
                      error: unauthorized
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
              examples:
                invalid_asset_id:
                  summary: Invalid asset ID format
                  value:
                    error:
                      message: 'Invalid asset_id: abc123'
                missing_parameter:
                  summary: Missing required parameter
                  value:
                    error:
                      message: asset_ids parameter is required
                version_count_mismatch:
                  summary: Version count doesn't match asset_ids count
                  value:
                    error:
                      message: versions count must match ids count
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
              examples:
                unauthorized:
                  summary: Invalid API credentials
                  value:
                    error:
                      message: Invalid signature
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
              examples:
                insufficient_permissions:
                  summary: No permission to restore assets
                  value:
                    error:
                      message: Update operation not authorized for account
  /v1_1/{cloud_name}/resources/by_external_ids:
    get:
      summary: Get resources by external IDs
      description: Retrieves details for specific resources using their external IDs (or asset IDs).
      tags:
        - assets
      operationId: listResourcesByExternalIDs
      x-speakeasy-ignore: true
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: external_ids
          in: query
          required: true
          explode: false
          schema:
            type: array
            items:
              type: string
          description: List of external IDs for identifying the assets to retrieve. Either external_ids or asset_ids must be provided.
        - name: resource_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - image
              - video
              - raw
          description: Resource type (optional)
        - name: fields
          in: query
          required: false
          schema:
            type: string
            enum:
              - asset_folder folder filename format version version_id signature resource_type created_at uploaded_at bytes backup_bytes width height aspect_ratio access_control metadata context tags pixels custom moderation url secure_url status etag
          description: |
            A comma-separated list of fields to include in the response.
            Notes:
            This parameter takes precedence over other parameters requesting details in the response (e.g., tags or context), so include them in this list if you also want their details returned.
            The following fields are always included in the response: public_id, and asset_id.
        - name: tags
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: |
              Whether to include the list of tag names assigned to each asset. Default: false.
        - name: context
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: |
              Whether to include key-value pairs of contextual metadata associated with each asset. Default: false.
        - name: metadata
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: |
              Whether to include the structured metadata fields and values assigned to each asset. Default: false.
        - name: moderations
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: |
              Whether to include image moderation status of each asset. Default: false.
      responses:
        '200':
          description: Successfully retrieved resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                getResourceResponseExample:
                  $ref: '#/components/examples/GetResourceResponseExample'
        '400':
          description: Bad request - missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: One or more external IDs not found (partial success possible)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/{resource_type}/{type}:
    delete:
      summary: Delete resources by public ID
      description: Deletes assets uploaded to your product environment, identified by their public IDs.
      tags:
        - assets
      operationId: deleteResourcesByPublicId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: type
          in: path
          required: true
          schema:
            type: string
            description: The delivery type of the asset.
            enum:
              - upload
              - private
              - authenticated
              - fetch
              - facebook
              - twitter
              - gravatar
              - youtube
              - hulu
              - vimeo
              - animoto
              - worldstarhiphop
              - dailymotion
              - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceByPublicIdsRequest'
      responses:
        '200':
          description: Resource successfully deleted
          content:
            application/json:
              schema:
                type: object
              examples:
                deleteResourceResponseExample:
                  $ref: '#/components/examples/DeleteResourcesResponseExample'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/{resource_type}/{type}/{public_id}:
    get:
      summary: Get resource by public ID
      description: Returns the details of a single resource specified by its public ID.
      tags:
        - assets
      operationId: getResourceByPublicId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: type
          in: path
          required: true
          schema:
            type: string
            description: The delivery type of the asset.
            enum:
              - upload
              - private
              - authenticated
              - fetch
              - facebook
              - twitter
              - gravatar
              - youtube
              - hulu
              - vimeo
              - animoto
              - worldstarhiphop
              - dailymotion
              - list
        - name: public_id
          in: path
          required: true
          schema:
            type: string
          description: The public ID of the asset to update.
        - $ref: '#/components/parameters/colors'
        - $ref: '#/components/parameters/media_metadata'
        - $ref: '#/components/parameters/faces'
        - $ref: '#/components/parameters/quality_analysis'
        - $ref: '#/components/parameters/accessibility_analysis'
        - $ref: '#/components/parameters/pages'
        - $ref: '#/components/parameters/phash'
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/versions'
        - $ref: '#/components/parameters/max_derived_results'
        - $ref: '#/components/parameters/derived_next_cursor'
      responses:
        '200':
          description: Resource details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
              examples:
                getResourceResponseExample:
                  $ref: '#/components/examples/GetResourceResponseExample'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    post:
      summary: Update asset by public ID
      description: |
        Updates one or more attributes of a specified resource (asset) identified by its public ID. Note that you can also update many attributes of an existing asset using the explicit method, which is not rate limited.
      tags:
        - assets
      operationId: updateResourceByPublicId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: type
          in: path
          required: true
          schema:
            type: string
            description: The delivery type of the asset.
            enum:
              - upload
              - private
              - authenticated
              - facebook
              - twitter
              - gravatar
              - youtube
              - hulu
              - vimeo
              - animoto
              - worldstarhiphop
              - dailymotion
        - name: public_id
          in: path
          required: true
          schema:
            type: string
          description: The public ID of the asset to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdateRequest'
      responses:
        '200':
          description: Asset successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
              examples:
                updateResourceResponseExample:
                  $ref: '#/components/examples/UpdateResourceResponseExample'
        '400':
          description: Bad request - Invalid parameters or values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized - Invalid API key or secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/{asset_id}:
    get:
      x-speakeasy-mcp:
        name: get-asset-details
        scopes:
          - librarian
        description: |
          Purpose: Retrieves comprehensive details about a specific asset using its unique asset ID, providing complete metadata, transformation information, derived resources, and analysis results for the requested asset.
          Usage: Use this to get detailed information about a single asset including metadata, dimensions, file properties, color analysis, face detection results, and associated transformations. Essential for asset inspection, debugging, and detailed content analysis workflows.
          Example request: GET /resources/by_asset_id/e9b44a374f66ad53a64a74c7398f7?colors=true&faces=true&media_metadata=true
          Parameters: asset_id(unique asset identifier), colors(include color analysis), media_metadata(include IPTC/XMP/EXIF data), faces(include face detection), quality_analysis(include quality scores), accessibility_analysis(include accessibility scores), pages(include page count for documents), phash(include perceptual hash), coordinates(include custom coordinates), versions(include backup versions), max_results(limit derived resources returned), derived_next_cursor(pagination for derived resources)
          When Not to Use: Don't use for bulk asset retrieval (use list-images/list-videos/list-files instead), asset discovery workflows, or when you only need basic asset information without detailed analysis.
          Output: Returns comprehensive asset information: asset_id, public_id, format, version, width, height, bytes, url, secure_url, created_at, asset_folder, tags, context, metadata, colors(color analysis), faces(detected faces), quality_analysis(quality scores), accessibility_analysis(accessibility scores), derived(array of derived resources), versions(backup versions if requested)
          Example output: {"asset_id":"e9b44a374f66ad53a64a74c7398f7","public_id":"sample","format":"jpg","version":1234567890,"width":1000,"height":800,"bytes":245032,"url":"https://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","created_at":"2023-01-15T10:30:00Z","asset_folder":"products","tags":["featured"],"colors":{"predominant":[["#F3285C",18.0]]}}
      summary: Get resource by asset ID
      description: Returns the details of a single resource specified by its asset ID.
      tags:
        - assets
      operationId: getResourceByAssetId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
          description: The asset ID of the resource.
          example: e9b44a374f66ad53a64a74c7398f7
        - $ref: '#/components/parameters/colors'
        - $ref: '#/components/parameters/media_metadata'
        - $ref: '#/components/parameters/faces'
        - $ref: '#/components/parameters/quality_analysis'
        - $ref: '#/components/parameters/accessibility_analysis'
        - $ref: '#/components/parameters/pages'
        - $ref: '#/components/parameters/phash'
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/versions'
        - $ref: '#/components/parameters/max_derived_results'
        - $ref: '#/components/parameters/derived_next_cursor'
      responses:
        '200':
          description: Resource details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
              examples:
                getResourceResponseExample:
                  $ref: '#/components/examples/GetResourceResponseExample'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: asset-update
        scopes:
          - librarian
        description: |
          Purpose: Updates an existing asset's metadata, tags, context, and other attributes using its immutable asset ID, allowing you to modify asset properties without needing to know the current public ID or folder structure.
          Usage: Use this to update asset metadata, add/remove tags, modify context data, or change other asset attributes when you have the asset ID. Essential for asset management workflows, content tagging systems, and metadata synchronization processes.
          Example request: {"tags": "product,electronics,featured", "context": "category=electronics|status=active", "metadata": {"product_id": "12345", "category": "smartphones"}}
          Parameters: asset_id(immutable asset identifier from URL path), tags(comma-separated tag list), context(pipe-separated key=value pairs), metadata(structured metadata object), access_control(access permissions), auto_tagging(confidence threshold 0-1), notification_url(callback URL), face_coordinates(facial detection coordinates), custom_coordinates(manual crop coordinates), background_removal(AI background removal), moderation(content moderation)
          When Not to Use: Don't use for renaming assets or changing public IDs (use rename instead). Avoid for high-frequency updates on the same asset. Don't use if you need to update transformation settings (those are separate from asset metadata).
          Output: Returns updated asset information: public_id(asset identifier), asset_id(unique asset ID), version(version number), resource_type(asset type), type(storage type), format(file format), created_at(creation timestamp), bytes(file size), width/height(dimensions for images/videos), tags(current tags array), context(current context object), metadata(current structured metadata), url(public delivery URL), secure_url(HTTPS delivery URL)
          Example output: {"public_id":"sample","asset_id":"abc123def456","version":1234567890,"resource_type":"image","type":"upload","format":"jpg","created_at":"2023-01-15T10:00:00Z","bytes":45231,"width":800,"height":600,"tags":["product","electronics","featured"],"context":{"category":"electronics","status":"active"},"metadata":{"product_id":"12345","category":"smartphones"},"url":"http://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","secure_url":"https://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg"}
      summary: Updates an existing asset's metadata, tags, and other attributes using its asset ID
      description: |
        Updates one or more attributes of a specified resource (asset) by its asset ID. This enables you to update details of an asset by its unique and immutable identifier, regardless of public ID, display name, asset folder, resource type or deliver type. Note that you can also update many attributes of an existing asset using the explicit method, which is not rate-limited.
      tags:
        - assets
      operationId: updateResourceByAssetId
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-fA-F0-9]+$
          description: The unique asset ID of the asset to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdateRequest'
      responses:
        '200':
          description: Resource successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
              examples:
                updateResourceResponseExample:
                  $ref: '#/components/examples/UpdateResourceResponseExample'
        '400':
          description: Bad request - Invalid parameters or values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized - Invalid API key or secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/tags/{resource_type}:
    get:
      x-speakeasy-mcp:
        name: list-tags
        scopes:
          - librarian
        description: |
          Purpose: Retrieves a comprehensive list of all tags currently assigned to assets in your Cloudinary account, providing an overview of your tagging taxonomy and helping you understand what organizational labels are in use.
          Usage: Use this to audit existing tags, discover available tags for asset organization, or build tag suggestion systems in your applications. Essential for content management workflows and maintaining consistent tagging practices.
          Example request: GET /resources/image/tags?prefix=product&max_results=100 (no request body required)
          Parameters: resource_type(filter by image/video/raw), prefix(filter tags starting with specific text), max_results(limit response size 1-500), next_cursor(pagination token for additional results)
          When Not to Use: Don't use for retrieving tags for specific assets (use get-resource-details instead). Avoid frequent polling as tag lists change infrequently.
          Output: Returns tag list with pagination: tags(array of tag strings), next_cursor(pagination token if more results available)
          Example output: {"tags":["product","electronics","mobile","smartphone","featured","sale"],"next_cursor":"8edbc61040178db60b0973ca9494bf3a"}
      summary: Retrieves a list of tags currently applied to assets in your Cloudinary account
      description: |
        Retrieves a comprehensive list of all tags that exist in your product environment for assets of the specified type.

        [Cloudinary Admin API documentation](https://cloudinary.com/documentation/admin_api)
      tags:
        - assets
        - tags
      operationId: listResourceTags
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: prefix
          in: query
          required: false
          schema:
            type: string
          description: The prefix to use if you want to limit the returned tags to those that start with the specified prefix.
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/max_results'
      responses:
        '200':
          description: List of tags retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: string
                  next_cursor:
                    type:
                      - string
                      - 'null'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/backup/{asset_id}:
    delete:
      summary: Delete backed up versions
      description: |
        Deletes specific backed up versions of an asset identified by asset ID.
        This operation is irreversible and deleted versions cannot be recovered.
      tags:
        - assets
        - backups
      operationId: deleteBackupVersions
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-fA-F0-9]+$
          description: The asset ID of the resource.
          example: e9b44a374f66ad53a64a74c7398f7
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version_ids:
                  type: array
                  items:
                    type: string
                  description: The list of version IDs to delete from backup.
                  example:
                    - 5552aa57e67445552a3cdc1110a0115
                    - 383e22a57167445552a3cdc16f0a0c85
              required:
                - version_ids
      responses:
        '200':
          description: Backup versions successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  asset_id:
                    type: string
                    description: The asset ID of the resource.
                  deleted_version_ids:
                    type: array
                    items:
                      type: string
                    description: The list of version IDs that were successfully deleted.
                required:
                  - asset_id
                  - deleted_version_ids
        '207':
          description: Multi-status - some versions deleted successfully, others failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  asset_id:
                    type: string
                    description: The asset ID of the resource.
                  deleted_version_ids:
                    type: array
                    items:
                      type: string
                    description: The list of version IDs that were successfully deleted.
                  failures:
                    type: array
                    items:
                      type: object
                      properties:
                        version_id:
                          type: string
                          description: The version ID that failed to delete.
                        error:
                          type: string
                          description: The error message explaining the failure.
                    description: The list of version IDs that failed to delete with error messages.
                required:
                  - asset_id
                  - deleted_version_ids
        '400':
          description: Bad request - Invalid parameters or values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized - Invalid API key or secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/usage:
    get:
      x-speakeasy-mcp:
        name: get-usage-details
        scopes:
          - admin
        description: |
          Purpose: Provides a report on your product environment's usage, including storage, credits, bandwidth, requests, and asset counts. 
          Usage: Use this operation to monitor account usage or retrieve usage metrics for a specific date (up to 3 months in the past). 
          When Not to Use: Don't use this for per-asset statistics or real-time updates – the data is aggregated and updated periodically, meant for overall account monitoring. 
          Output: Returns a comprehensive JSON object containing: plan(account plan type), last_updated(last usage calculation date), date_requested(usage report date), credits(total credits used/limit), transformations(image/video transformation usage), storage(storage usage in bytes), bandwidth(bandwidth usage in bytes), resources(total number of assets), derived_resources(transformed assets count), requests(total API requests), objects(object detection usage), impressions(image impression count), seconds_delivered(video seconds delivered), aws_rek_tagging(AWS recognition usage/limits), google_speech(Google speech API usage/limits), google_video_tagging(Google video tagging usage/limits), google_tagging(Google image tagging usage/limits), cloudinary_ai(Cloudinary AI services usage/limits), object_detection(object detection usage/limits), clip(CLIP model usage/limits), ai_vision(AI vision services usage/limits), media_limits(file size/pixel limits)
      summary: Retrieves comprehensive usage metrics and account statistics
      description: A report on the status of product environment usage, including storage, credits, bandwidth, requests, number of resources, and add-on usage.
      tags:
        - usage
      operationId: getUsage
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
            pattern: ^\d{4}-\d{2}-\d{2}$
            description: The date for which to retrieve usage details. If not specified, returns the current month's usage.
      responses:
        '200':
          description: Usage details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/video/analytics/views:
    get:
      summary: Get video views
      description: |
        Retrieves analytics data for video views. Results can be filtered using expressions based on various criteria
        such as video public ID, view duration, viewer information, and more.
      tags:
        - video_analytics
      operationId: getVideoViews
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: expression
          in: query
          required: false
          schema:
            type: string
          description: 'A set of conditions used to limit the results to rows that match those conditions. For example: `?expression=video_public_id=skate`'
        - name: max_results
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 10
          description: Specifies the number of items to include in the response.
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum:
              - view_ended_at
              - video_duration
              - view_watch_time
              - '-view_ended_at'
              - '-video_duration'
              - '-view_watch_time'
            default: '-view_ended_at'
          description: Specifies the expression field by which to sort the results. Prepend values with a '-' to reverse the order.
        - name: next_cursor
          in: query
          required: false
          schema:
            type: string
          description: The value to be used to obtain the next batch of results.
      responses:
        '200':
          description: List of video views retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    description: Unique identifier for the request
                  next_cursor:
                    type: string
                    description: Cursor value for pagination
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        video_public_id:
                          type: string
                          description: The full public ID of the video
                        video_duration:
                          type:
                            - number
                            - 'null'
                          description: The duration in seconds of the video
                        video_transformation:
                          type:
                            - string
                            - 'null'
                          description: The transformation applied to the video
                        video_extension:
                          type:
                            - string
                            - 'null'
                          description: The file extension of the video
                        viewer_application_name:
                          type:
                            - string
                            - 'null'
                          description: The application used to view the video
                        viewer_location_country_code:
                          type:
                            - string
                            - 'null'
                          description: The 2-digit ISO country code of the viewer location
                        viewer_os_identifier:
                          type:
                            - string
                            - 'null'
                          description: The full identifier for the viewer's operating system
                        view_watch_time:
                          type:
                            - number
                            - 'null'
                          description: The length of time the video was viewed
                        view_ended_at:
                          type: string
                          format: date-time
                          description: The date when the video view ended
              example:
                request_id: 1d39ccc69109b1cefac697957bda7952
                next_cursor: 2a54714067686dc630b44e3b863163dc
                data:
                  - video_public_id: dog
                    video_duration: 100
                    video_transformation: w_100,h_100
                    video_extension: mp4
                    viewer_application_name: Chrome
                    viewer_location_country_code: US
                    viewer_os_identifier: Linux
                    view_watch_time: 313
                    view_ended_at: '2025-05-13T09:59:21.000Z'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/related_assets/{asset_id}:
    post:
      x-speakeasy-mcp:
        name: create-asset-relations
        scopes:
          - librarian
        description: |
          Purpose: Creates bidirectional relationships between assets using their unique asset IDs, enabling logical grouping and association of related content. This allows you to establish connections between assets for content organization, related item discovery, and workflow management.
          Usage: Use this to link related assets such as product images with their videos, documents with their thumbnails, or content pieces that belong to the same campaign. Essential for building content relationships, recommendation systems, and asset organization workflows.
          Example request: {"assets_to_relate": ["f12345a5c789c", "bbb0efc00c0f12"]}
          Parameters: asset_id(primary asset identifier from URL path), assets_to_relate(array of up to 10 asset IDs to relate to the primary asset)
          Note: This is bidirectional - each related asset will also list the primary asset as related. Relations are one-to-many (primary asset relates to all specified assets, but specified assets don't automatically relate to each other).
          When Not to Use: Don't use for temporary associations or data that changes frequently. Avoid creating excessive relations as this can impact performance.
          Output: Returns relation creation results: created(array of successfully created relations), errors(array of failed relations with error details), partially_successful(boolean indicating if some relations failed)
          Example output: {"created":[{"asset_id":"f12345a5c789c","status":"related"},{"asset_id":"bbb0efc00c0f12","status":"related"}],"errors":[],"partially_successful":false}
      operationId: createAssetRelationsByAssetId
      summary: Add related assets by asset ID
      description: Relates an asset to other assets by their asset IDs, an immutable identifier, regardless of public ID, display name, asset folder, resource type or deliver type. This is a bidirectional process, meaning that the asset will also be added as a related_asset to all the other assets specified. The relation is also a one to many relationship, where the asset is related to all the assets specified, but those assets aren't also related to each other.
      tags:
        - asset_relations
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
          description: The asset ID of the asset to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assets_to_relate
              properties:
                assets_to_relate:
                  type: array
                  description: Relates the asset to all the assets specified in this array of up to 10 assets, specified by their asset IDs.
                  items:
                    type: string
                  maxItems: 10
                  example:
                    - f12345a5c789c
                    - bbb0efc00c0f12
      responses:
        '200':
          description: Successfully created all asset relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_response'
        '207':
          description: Partially successful - some relations were created, some failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-asset-relations
        scopes:
          - librarian
        description: |
          Purpose: Removes bidirectional relationships between assets using their unique asset IDs, breaking previously established content associations and logical groupings.
          Usage: Use this to clean up outdated asset relationships, remove incorrect associations, or reorganize content structures when relationships are no longer relevant. Essential for maintaining clean content organization and relationship accuracy.
          Example request: {"assets_to_unrelate": ["f12345a5c789c", "bbb0efc00c0f12"]}
          Parameters: asset_id(primary asset identifier from URL path), assets_to_unrelate(array of asset IDs to remove relationships with)
          Note: This is bidirectional - the primary asset will be removed from the related assets list of each specified asset, and the specified assets will be removed from the primary asset's related list.
          When Not to Use: Don't use for temporary relationship management or when you might need to restore relationships later. Be careful not to remove relationships that are still needed for content organization.
          Output: Returns relation deletion results: deleted(array of successfully removed relations), errors(array of failed deletions with error details), partially_successful(boolean indicating if some deletions failed)
          Example output: {"deleted":[{"asset_id":"f12345a5c789c","status":"unrelated"},{"asset_id":"bbb0efc00c0f12","status":"unrelated"}],"errors":[],"partially_successful":false}
      operationId: deleteAssetRelationsByAssetId
      summary: Delete asset relations by asset ID
      description: Unrelates the asset from other assets, specified by their asset IDs, an immutable identifier, regardless of public ID, display name, asset folder, resource type or deliver type. This is a bidirectional process, meaning that the asset will also be removed as a related_asset from all the other assets specified.
      tags:
        - asset_relations
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
          description: The asset ID of the asset to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assets_to_unrelate
              properties:
                assets_to_unrelate:
                  type: array
                  description: Unrelates the asset from all the assets specified in this array of assets, specified by their asset IDs.
                  items:
                    type: string
                  example:
                    - f12345a5c789c
                    - bbb0efc00c0f12
      responses:
        '200':
          description: Successfully deleted all asset relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_delete_response'
        '207':
          description: Partially successful - some relations were deleted, some failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_delete_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/related_assets/{resource_type}/{type}/{public_id}:
    post:
      operationId: createAssetRelationsByPublicId
      summary: Create asset relations by public ID
      description: Relates an asset to other assets by public IDs. This allows you to indicate that the asset is logically related to other assets in some way (e.g., similar content, or a peripheral asset like video/transcript, etc). This is a bidirectional process, meaning that the asset is also added as a related_asset to all the other assets specified. The relation is also a one to many relationship, where the asset is related to all the assets specified, but those assets aren't also related to each other.
      tags:
        - asset_relations
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
            default: upload
          description: The delivery type of the asset.
        - name: public_id
          in: path
          required: true
          schema:
            type: string
          description: The public ID of the asset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assets_to_relate
              properties:
                assets_to_relate:
                  type: array
                  description: Relates the asset to all the other assets specified in this array of up to 10 assets, specified as resource_type/type/public_id.
                  items:
                    type: string
                  maxItems: 10
                  example:
                    - raw/upload/dog_subtitles.srt
                    - image/authenticated/dog_license
      responses:
        '200':
          description: Successfully created all asset relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_response'
        '207':
          description: Partially successful - some relations were created, some failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      operationId: deleteAssetRelationsByPublicId
      summary: Delete asset relations by public ID
      description: Unrelates the asset from other assets, specified by public IDs. This is a bidirectional process, meaning that the asset will also be removed as a related_asset from all the other assets specified.
      tags:
        - asset_relations
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - $ref: '#/components/parameters/resource_type'
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - upload
              - private
              - authenticated
            default: upload
          description: The delivery type of the asset.
        - name: public_id
          in: path
          required: true
          schema:
            type: string
          description: The public ID of the asset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assets_to_unrelate
              properties:
                assets_to_unrelate:
                  type: array
                  description: Unrelates the asset from all the assets specified in this array of assets, specified as resource_type/type/public_id.
                  items:
                    type: string
                  example:
                    - raw/upload/dog_subtitles.srt
                    - image/authenticated/dog_license
      responses:
        '200':
          description: Successfully deleted all asset relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_delete_response'
        '207':
          description: Partially successful - some relations were deleted, some failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset_relations_delete_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/folders/{folder}:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
      - name: folder
        in: path
        required: true
        schema:
          type: string
          description: The path of the folder to operate on, including any nested folders.
          example: product/test
    get:
      summary: List sub-folders
      description: Returns a list of sub-folders under the specified folder path.
      tags:
        - folders
      operationId: showFolder
      responses:
        '200':
          description: List of sub-folders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folders_list_response'
        '400':
          description: Bad request (e.g., invalid path format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    put:
      x-speakeasy-mcp:
        name: move-folder
        scopes:
          - librarian
        description: |
          Purpose: Renames or moves an entire folder (along with all assets it contains) to a new location within your Cloudinary media library, updating all asset paths accordingly.
          Usage: Use this to reorganize folder structures, rename folders for better organization, or move content between different organizational hierarchies. Essential for maintaining organized media libraries and adapting to changing content structures.
          Example request: PUT /folders/old/path with body {"to_folder": "new/path"}
          Parameters: folder(current folder path), to_folder(new folder path - can include renaming and/or moving to different location)
          When Not to Use: Don't use for deleting folders (use delete-folder instead). Avoid moving folders that are actively being used in production workflows during the operation. Don't use for individual asset moves (assets maintain their public IDs within the new folder path).
          Output: Returns details of the move operation showing both source and destination paths.
          Example output: {"from":{"name":"path","path":"old/path"},"to":{"name":"path","path":"new/path"}}
      summary: Renames or moves an entire folder (along with all assets it contains) to a
      description: Updates a folder's properties.
      tags:
        - folders
      operationId: updateFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_folder:
                  type: string
                  description: The new path for the folder.
                  example: product1/test1
              required:
                - to_folder
      responses:
        '200':
          description: Folder renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  from:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the source folder.
                        example: test
                      path:
                        type: string
                        description: The full path of the source folder.
                        example: product/test
                    required:
                      - name
                      - path
                  to:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the target folder.
                        example: test1
                      path:
                        type: string
                        description: The full path of the target folder.
                        example: product1/test1
                    required:
                      - name
                      - path
                required:
                  - from
                  - to
        '400':
          description: Bad request (e.g., invalid path format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    post:
      x-speakeasy-mcp:
        name: create-folder
        scopes:
          - librarian
        description: |
          Purpose: Creates an empty folder structure in your Cloudinary media library to organize your assets hierarchically. The folder will be available immediately for asset uploads and folder operations.
          Usage: Use this to establish folder structures before uploading assets, organize content by categories or projects, or create nested folder hierarchies for complex media organization. Essential for maintaining clean asset organization and supporting structured content workflows.
          Example request: POST /folders/marketing/campaigns/2024
          Parameters: folder(full folder path to create - required, supports nested paths like "marketing/campaigns/2024")
          When Not to Use: Don't use to move existing folders (use move-folder instead). Avoid creating deeply nested structures that may complicate asset management. Not needed if uploading assets directly creates the folder structure automatically.
          Output: Returns confirmation of folder creation with path details and success status.
          Example output: {"success":true,"path":"marketing/campaigns/2024","name":"2024"}
      tags:
        - folders
      summary: Creates a new empty folder in your Cloudinary media library
      description: Creates a new folder at the specified path
      operationId: createFolder
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: folder
          in: path
          required: true
          schema:
            type: string
            pattern: ^(?!.*//)[\\w-]+(?:/[\\w-]+)*$
            description: The full path to the folder to be created. Must not contain double slashes or special characters.
            example: samples/food
          style: simple
          explode: false
      responses:
        '200':
          description: Folder created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the operation was successful
                    example: true
                  path:
                    type: string
                    description: The path of the created folder
                    example: samples/food
                  name:
                    type: string
                    description: The name of the created folder
                    example: food
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '409':
          description: Folder already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    delete:
      x-speakeasy-mcp:
        name: delete-folder
        scopes:
          - librarian
        description: |
          Purpose: Permanently deletes a folder and all assets contained within it from your Cloudinary media library. This is a destructive operation that removes both the folder structure and any assets it contains.
          Usage: Use this to clean up unused folders and their contents, remove deprecated organizational structures, or permanently delete entire content categories. Essential for media library maintenance and storage cleanup operations.
          Example request: DELETE /folders/archived/old-campaign
          Parameters: folder(full folder path to delete - required)
          When Not to Use: Don't use if you only want to move or rename the folder (use move-folder instead). Avoid using this for folders containing assets you might need later, as deletion is permanent. Don't use for individual asset deletion (use delete-asset instead).
          Output: Returns confirmation listing all deleted folder paths.
          Example output: {"deleted":["archived/old-campaign"]}
      summary: Deletes an existing folder from your media library
      description: Deletes a folder and all assets within it.
      tags:
        - folders
      operationId: destroyFolder
      responses:
        '200':
          description: Folder deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: array
                    description: List of deleted folder paths
                    items:
                      type: string
                    example:
                      - product/test
                required:
                  - deleted
        '400':
          description: Bad request (e.g., invalid path format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '404':
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/folders:
    get:
      summary: Get root folders
      description: |
        Retrieves an array of all root folders in your Cloudinary product environment. Limited to 2000 results.
      tags:
        - folders
      operationId: listRootFolders
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      responses:
        '200':
          description: The root folders were successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folders_list_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/folders/search:
    get:
      x-speakeasy-mcp:
        name: search-folders
        scopes:
          - librarian
        description: |
          Purpose: Searches for folders whose attributes match a given expression, or returns all folders when no expression is provided. This lets you filter and find specific folders by criteria such as folder name or path using Lucene-like syntax, or get a complete folder inventory equivalent to GET /folders.
          Usage: Use when you need to locate specific folders or get a complete folder listing. Essential for folder management in dynamic environments where you need to find folders by patterns (e.g., all test folders, marketing-related folders, folders from specific time periods). Supports boolean logic for complex queries combining multiple criteria.
          Example request: GET /folders/search?expression=name:test OR path:marketing&max_results=10&sort_by=[{"field":"created_at","direction":"desc"}]
          Note: Wildcards () are not supported in expressions. Only works in dynamic folder mode environments, not legacy fixed-folder mode. Newly created folders may take moments to appear in search results.
          Parameters - examples of parameters that can be used: expression(search query using Lucene syntax - empty string returns all folders), max_results(limit results 1-2000, default 50), sort_by(array of sort criteria with field and direction), next_cursor(pagination cursor for additional results), with_count(include total count in response)
          Expression examples: empty string (list all folders), name:test (folders containing "test"), path:marketing (folders under marketing path), name:project AND path:2024 (boolean combination), name:test OR name:staging (multiple criteria)
          When Not to Use: Don't use for simple folder structures where you know exact paths - direct folder endpoints are simpler. Avoid for finding individual assets (use asset search instead). Not suitable for legacy fixed-folder mode accounts or when you need wildcard pattern matching.
          Output: Returns folders matching search criteria with total_count(number of matches), time(query execution milliseconds), folders(array of matching folder objects), next_cursor(pagination token if more results available). Each folder includes name, path, created_at timestamp, and external_id.
          Example output: {"total_count":2,"time":45,"folders":[{"name":"test","path":"test","created_at":"2025-02-03T09:05:44+00:00","external_id":"ca65877d72894ae12539a0185d7ca4eff3"},{"name":"test-marketing","path":"marketing/test-marketing","created_at":"2024-12-15T10:30:22+00:00","external_id":"cb1234567890abcdef"}]}
      summary: Searches for folders whose attributes match a given expression
      description: |
        Lists the folders that match the specified search expression. Limited to 2000 results. If no parameters are passed, returns the 50 most recently created folders in descending order of creation time.
      operationId: searchFolders
      tags:
        - folders
      parameters:
        - $ref: '#/components/parameters/cloud_name'
        - name: expression
          in: query
          required: false
          schema:
            oneOf:
              - type: string
              - type: object
          description: The (Lucene-like) string expression specifying the search query, or an object for advanced queries. If not passed, returns all folders (up to max_results).
        - name: sort_by
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: An array of key-value pairs for sorting. Each value is a key and direction (asc/desc).
          example:
            - name:asc
        - name: max_results
          in: query
          required: false
          schema:
            type: integer
            maximum: 500
            default: 50
          description: Maximum number of folders to return (max 500, default 50).
        - name: next_cursor
          in: query
          required: false
          schema:
            type: string
          description: When more results are available, use the next_cursor value from the previous response.
      responses:
        '200':
          description: A listing of all folders that match the search expression criteria according to the requested sorting order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folders_search_response'
              example:
                total_count: 14
                time: 1136
                next_cursor: 0a37f8c9f65e79c1cbe782d47987ed108d9f9e0dad4b0666adbf4eac9a634191996204a0ef84ce7b3e0e
                folders:
                  - name: 1_folder_param
                    path: my_parent/1_folder_param
                    created_at: 2024-12-16T11:31:00:00
                    external_id: c7c08f8ecf093353d669d2ea3123967c7
                  - name: a_folder_param
                    path: my_parent/a_folder_param
                    created_at: 2024-12-16T11:08:32:00
                    external_id: c7c08b736592482c1125ba5d689ab8779
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
    post:
      summary: Searches for folders in your product environment
      description: |
        Lists the folders that match the specified search expression. Limited to 2000 results. If no parameters are passed, returns the 50 most recently created folders in descending order of creation time.
      operationId: searchFoldersPost
      tags:
        - folders
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expression:
                  type: string
                  description: The (Lucene-like) string expression specifying the search query.
                sort_by:
                  type: array
                  items:
                    type: string
                  description: An array of key-value pairs for sorting. Each value is a key and direction (asc/desc).
                  example:
                    - name:asc
                max_results:
                  type: integer
                  maximum: 500
                  default: 50
                  description: Maximum number of folders to return (max 500, default 50).
                next_cursor:
                  type: string
                  description: When more results are available, use the next_cursor value from the previous response.
            example:
              expression: name:folder AND path:my_parent AND created_at=>4w
              sort_by:
                - name:asc
              max_results: 10
      responses:
        '200':
          description: A listing of all folders that match the search expression criteria according to the requested sorting order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folders_search_response'
              example:
                total_count: 14
                time: 1136
                next_cursor: 0a37f8c9f65e79c1cbe782d47987ed108d9f9e0dad4b0666adbf4eac9a634191996204a0ef84ce7b3e0e
                folders:
                  - name: 1_folder_param
                    path: my_parent/1_folder_param
                    created_at: 2024-12-16T11:31:00:00
                    external_id: c7c08f8ecf093353d669d2ea3123967c7
                  - name: a_folder_param
                    path: my_parent/a_folder_param
                    created_at: 2024-12-16T11:08:32:00
                    external_id: c7c08b736592482c1125ba5d689ab8779
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/derived_resources:
    delete:
      x-speakeasy-mcp:
        name: delete-derived-assets
        scopes:
          - librarian
        description: |
          Purpose: Permanently deletes specific derived resources (transformed versions) from your Cloudinary account using their unique derived resource IDs. Derived resources are generated versions of your original assets created through transformations like resizing, cropping, or format conversion.
          Usage: Use this to clean up specific derived assets that are no longer needed, manage storage quotas, or remove outdated transformed versions while preserving the original asset. Essential for storage optimization and managing transformation caches.
          Example request: {"derived_resource_ids": ["1234567890abcdef", "fedcba0987654321"], "invalidate": true}
          Parameters: derived_resource_ids(array of derived resource identifiers to delete), invalidate(whether to invalidate CDN cache for deleted resources)
          When Not to Use: Don't use for deleting original assets (use delete-asset instead) or for bulk deletion of all derived assets (those have separate endpoints). Avoid invalidating CDN cache unnecessarily as it impacts delivery performance.
          Output: Returns deletion results with status for each derived resource: deleted(object mapping derived resource IDs to deletion status - "deleted" or "not_found"), unauthorized(array of IDs that couldn't be deleted due to permissions), invalidation(CDN invalidation details including processing time and affected URLs)
          Example output: {"deleted": {"1234567890abcdef": "deleted", "fedcba0987654321": "not_found"}, "unauthorized": [], "invalidation": {"took": 25.0, "urls": ["/image/upload/w_100/sample", "/image/upload/w_200/sample"]}}
      summary: Delete derived resources
      description: Deletes derived resources by derived resource ID
      tags:
        - assets
      operationId: derivedDestroy
      parameters:
        - $ref: '#/components/parameters/cloud_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DerivedDestroyRequest'
      responses:
        '200':
          description: Derived resources successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DerivedDestroyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/search:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      operationId: searchAssets
      summary: Provides a powerful query interface to filter and retrieve assets and their details
      description: Returns a list of resources matching the specified search criteria. The API supports a variety of search parameters and returns a JSON response with the matching resources and their details.
      tags:
        - search
      x-speakeasy-mcp:
        name: search-assets
        scopes:
          - librarian
        description: |
          Purpose: Provides a powerful query interface to filter and retrieve assets (images, videos, raw files) in your account using a flexible expression language. The search-assets operation allows you to specify complex conditions (similar to a SQL or Lucene query) on asset fields such as public IDs, filenames, tags, folders, upload dates, file size, format, metadata, etc., and get back only the resources that meet those criteria. This is essentially Cloudinary's Search API, enabling sophisticated Digital Asset Management queries.
          Usage: Use this when you need to find assets that meet specific conditions or combinations of conditions beyond simple listings. For example, "find all images tagged 'summer' uploaded last week larger than 2MB", or "videos longer than 30 seconds with format MP4 in a certain folder". It's ideal for building admin dashboards, search functionality in a media library, or anytime you need to filter resources by attributes. You can combine multiple filters with AND/OR logic, do prefix or wildcard searches, numeric ranges, date ranges, etc. The search expression language supports tokenized (contains) searches and exact matches on string fields, numerical comparisons, date comparisons, and more. (Boolean operators like AND, OR, NOT can be used to join sub-expressions as well.) Keep in mind that this is a rate-limited Admin API method, so it's not meant for high-volume public queries, but rather for backend or management use.
          When Not to Use: If a simpler endpoint can achieve the goal (for example, listing all assets in a folder or retrieving a specific asset by ID), use that instead of executing a search query. The search API is very powerful but also more resource-intensive, so avoid using it unnecessarily (especially for frequent or simple operations that could be achieved with direct GET calls). Also, if your search can be done via tagging or structured metadata and you prefer to maintain those, consider whether you actually need complex queries. In short, don't use search-assets for every small retrieval when an exact fetch or a simpler list would do, to stay within rate limits and reduce complexity.
          Output: Returns a JSON response containing the assets that match the search criteria and some summary information. The main part of the response is an array called `resources`, where each element is a resource (asset) object with its details (like it would appear in an Admin API listing — e.g., public_id, URL, format, dimensions, tags, context, etc., depending on what fields you requested to include). The response also includes: `total_count` (total number of matched assets), `time` (query execution time), `next_cursor` (if there are more results beyond the page limit), and any aggregation counts.
          Searchable Fields and Filters: The query expression can utilize essentially any asset attribute. This includes standard fields like `public_id`, `filename`, `folder`, `tags`, `context` (key-value metadata), `format`, `resource_type`, `uploaded_at` (or `created_at`), file `bytes` (size), image/video dimensions (`width`, `height`, `pixels`), duration (for video), as well as structured metadata fields (`metadata.<field_external_id>`), moderation status, and more. Even internal or analysis-based fields can be used: e.g., `face_count`, `colors`, `accessibility_analysis` scores, `quality_analysis` scores, etc., for accounts with those features (these advanced fields require that you have enabled analysis on upload). *Full list of searchable fields:* - **Asset info:** `public_id`, `filename`, `folder`, `asset_id`, `asset_folder` (dynamic folders), `format`, `resource_type`, `type` (delivery type), `uploaded_at`/`created_at`, `uploaded_by` (if applicable), `tags`, `context` (use `context.<key>` for specific keys), `metadata.<external_id>` (for structured metadata fields), `status` (active/deleted). - **File characteristics:** `bytes` (file size), `width`, `height`, `aspect_ratio`, `pixels` (total pixels), `duration` (for video/audio length). - **Moderation and status:** `moderation_status` (e.g., approved/rejected), `moderation_kind` (which moderation service), `access_mode` (public or authenticated). - **Analysis & AI (Tier 2 features):** `face_count`, `grayscale` (boolean if image is grayscale), `colors` (contains a given color), `illustration_score`, `accessibility_analysis.colorblind_accessibility_score`, `quality_analysis.color_score`, `quality_analysis.pixel_score`, etc., as well as embedded `image_metadata` fields (EXIF/XMP data) and `location` (GPS coordinates).
          Supported Operators: You can filter string fields by exact match (`=`) or tokenized (contains) match (`:`), numeric and date fields with comparison operators (`=`, `>`, `>=`, `<`, `<=`) and range syntax (`[...]` for inclusive ranges, `{...}` for exclusive ranges). String fields support wildcards for prefix/suffix searches (e.g., `public_id:holiday*` for prefix). You can also use negation to exclude terms (for example, prefixing with a minus: `-tags:holiday` means tag is not "holiday"). Boolean fields use `=true` or `=false`. Complex expressions can be built using parentheses and the logical operators AND, OR, NOT as needed (Cloudinary's search syntax will interpret space-separated terms as AND by default).
          Sortable Fields: You can sort the results by a specified field in ascending or descending order. Common sortable fields include `public_id`, `filename`, `created_at`/`uploaded_at`, `updated_at` (last updated), `bytes` (file size), or other single-valued attributes like width or height. Multi-valued fields like tags or context keys are not typically used for sorting. If no sort is specified, results default to descending by creation date. You can specify multiple sort keys as an array of field-direction pairs (e.g., sort by format asc, then public_id asc).
          Examples: Here are a few example search expressions (as they would be used in the `expression` parameter) illustrating different types of filters and operators: ```text tags: sale AND uploaded_at > 1d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search_parameters'
      responses:
        '200':
          description: Successful search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
  /v1_1/{cloud_name}/resources/visual_search:
    parameters:
      - $ref: '#/components/parameters/cloud_name'
    post:
      operationId: visualSearchAssets
      summary: Finds images in your asset library based on visual similarity or content
      description: |
        Returns a list of resources that are visually similar to a specified image. You can provide the source image for comparison in one of three ways:
        - Provide a URL of an image
        - Specify the public ID or asset ID of an existing image
        - Provide a textual description
      tags:
        - search
      x-speakeasy-mcp:
        name: visual-search-assets
        scopes:
          - librarian
        description: |
          Purpose: Finds images in your asset library based on visual similarity or content, rather than metadata or filename. This operation analyzes an input (which can be an image or a textual description) and returns assets that are visually similar or relevant. It allows you to search by what's actually in the image (colors, shapes, objects, etc.) instead of by tags or keywords. For example, you can provide a reference image and find other images in your cloud with similar content.
          Usage: Use visual search when you need to locate images that "look like" a given image or match a described visual concept. Common use cases include finding duplicate or near-duplicate images, grouping product photos by appearance, or enabling end-users to search a media library by uploading an example image. To execute a visual search, you must supply either an image URL, an asset ID of an existing image, or a text query describing the desired image content. (This feature is available to Enterprise accounts, and images need to be indexed for visual search – for example, by setting the `visual_search` indexing flag on upload.)
          When Not to Use: If a simple metadata or tag search can achieve the result (for example, searching by explicit tags like "red shirt"), visual search may be unnecessary overhead. Also avoid using it for non-image asset types (it's intended for images). If your account does not have the visual search feature enabled (or you haven't indexed your images for it), this operation will not be applicable. In such cases, rely on standard search by tags, filenames, or other attributes.
          Output: Returns a list of image assets sorted by visual similarity to the query image or concept. The response includes an array of resource records (just like a typical asset listing) for the images deemed most similar. They are ordered from most visually similar to less similar. Each returned resource will include standard asset details (public ID, URLs, etc.), allowing you to identify or use those images. (No special fields beyond the normal asset info are added – the key difference is how the results are ranked by relevance.)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/visual_search_parameters'
      responses:
        '200':
          description: Successful visual search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search_response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    oauth2:
      type: oauth2
      description: OAuth2 Authorization Code flow for user authentication
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.cloudinary.com/oauth2/auth
          tokenUrl: https://oauth.cloudinary.com/oauth2/token
          scopes:
            asset_management: Allows managing assets, including reading, updating, and deleting.
            upload: Allows uploading new assets.
  parameters:
    cloud_name:
      name: cloud_name
      in: path
      required: true
      schema:
        type: string
        description: The cloud name of your product environment.
    upload_resource_type:
      name: resource_type
      in: path
      required: true
      schema:
        type: string
        description: |
          The type of resource to upload:
          - "image" for uploading strictly images
          - "video" for uploading strictly videos  
          - "raw" for uploading non-media files
          - "auto" for allowing Cloudinary to automatically detect the type of the uploaded file
        enum:
          - image
          - video
          - raw
          - auto
        default: auto
    resource_type:
      name: resource_type
      in: path
      required: true
      schema:
        type: string
        description: The type the of asset.
        enum:
          - image
          - video
          - raw
    next_cursor:
      name: next_cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor for pagination.
    max_results:
      name: max_results
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 500
      description: Maximum number of results to return (1-500).
    direction:
      name: direction
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      description: Sort direction.
    fields_spec:
      name: fields
      in: query
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - asset_folder
            - folder
            - filename
            - format
            - version
            - version_id
            - signature
            - resource_type
            - created_at
            - uploaded_at
            - bytes
            - backup_bytes
            - width
            - height
            - aspect_ratio
            - access_control
            - metadata
            - context
            - tags
            - pixels
            - custom
            - moderation
            - url
            - secure_url
            - status
            - etag
        description: |
          A comma-separated list of fields to include in the response. The following fields are always included in the response: public_id, and asset_id.
    colors:
      name: colors
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include color information (predominant colors and histogram of 32 leading colors). Default: false.'
    media_metadata:
      name: media_metadata
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include IPTC, XMP, and detailed Exif metadata in the response. Default: false.'
    faces:
      name: faces
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include a list of coordinates of detected faces. Default: false.'
    quality_analysis:
      name: quality_analysis
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to return quality analysis scores for the image. Default: false.'
    accessibility_analysis:
      name: accessibility_analysis
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to return accessibility analysis scores for the image. Default: false.'
    pages:
      name: pages
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to report the number of pages in multi-page documents (e.g., PDF). Default: false.'
    phash:
      name: phash
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include the perceptual hash (pHash) of the uploaded photo for image similarity detection. Default: false.'
    coordinates:
      name: coordinates
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include previously specified custom cropping coordinates and faces coordinates. Default: false.'
    versions:
      name: versions
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: 'Whether to include details of all the backed up versions of the asset. Default: false.'
    max_derived_results:
      name: max_results
      in: query
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 500
      required: false
      description: 'Maximum number of derived assets to return. Default: 10.'
    derived_next_cursor:
      name: derived_next_cursor
      in: query
      schema:
        type: string
      required: false
      description: The cursor for the next page of derived assets when there are more derived images than max_results.
  schemas:
    signature_parameters:
      type: object
      properties:
        signature:
          type: string
          description: |
            (Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests, the signature is automatically generated and added to the request. If you manually generate your own signed POST request, you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters.
        timestamp:
          type: integer
          description: The timestamp to use for the request in unix time. This is automatically computed by the Cloudinary's SDKs.
        api_key:
          type: string
          description: The API key to use for the request. This is automatically computed by the Cloudinary's SDKs.
    upload_explicit_parameters:
      type: object
      properties:
        accessibility_analysis:
          type: boolean
          description: Whether to return return accessibility analysis values for the image.
        asset_folder:
          type: string
          description: The asset folder to assign to the asset.
        async:
          type: boolean
          description: |
            When set to true, returns the uploaded asset's public_id immediately in the response, before the upload is completed (asynchronously). Default: false.
        auto_chaptering:
          type: boolean
          description: Whether to trigger automatic generation of video chapters. Chapters will be generated and saved as a .vtt file with -chapters appended to the public ID of the video. You can enable chapters as part of the Cloudinary Video Player. Relevant for videos only.
        auto_transcription:
          type: boolean
          description: Whether to trigger automatic generation of video transcription. Transcription will be generated and saved as a .vtt file with -transcription appended to the public ID of the video. Relevant for videos only.
        cinemagraph_analysis:
          type: boolean
          description: Whether to return a cinemagraph analysis value for the media asset between 0 and 1, where 0 means the asset is not a cinemagraph and 1 means the asset is a cinemagraph. Relevant for animated images and video only. A static image will return 0.
        colors:
          type: boolean
          description: 'Whether to retrieve predominant colors & color histogram of the uploaded image. Note: If all returned colors are opaque, then 6-digit RGB hex values are returned. If one or more colors contain an alpha channel, then 8-digit RGBA hex quadruplet values are returned.'
          default: false
        context:
          type: string
          description: Key-value pairs of general textual context metadata to attach to the asset.
        custom_coordinates:
          type: string
          description: An array of coordinates for custom cropping.
        display_name:
          type: string
          description: A display name for the asset.
        eager:
          type: string
          description: A list of transformations to eagerly generate for the asset. Accepts either a single transformation or a pipe-separated list of transformations.
        eager_async:
          type: boolean
          description: Whether to generate the eager transformations asynchronously in the background after the upload request is completed rather than before the upload is completed.
        eager_notification_url:
          type: string
          description: A URL to notify when eager transformations are completed.
        face_coordinates:
          type: string
          description: An array of coordinates representing detected faces in the asset, used for custom cropping or overlays.
        faces:
          type: boolean
          description: Whether to detect faces in the asset.
        headers:
          type: string
          description: |
            An HTTP header or a list of headers lines for adding as response HTTP headers when delivering the asset to your users. Supported headers: Link, Authorization, X-Robots-Tag.
          example: 'X-Robots-Tag: noindex'
        invalidate:
          type: boolean
          description: |
            Whether to invalidate CDN cache copies of a previously uploaded asset that shares the same public ID. Default: false.
        media_metadata:
          type: boolean
          description: |
            Whether to return IPTC, XMP, and detailed Exif metadata of the uploaded asset in the response.
            Supported for images, video, and audio.
            - Returned metadata for images includes: PixelsPerUnitX, PixelsPerUnitY, PixelUnits, Colorspace, and DPI.
            - Returned metadata for audio and video includes: audio_codec, audio_bit_rate, audio_frequency, channels, channel_layout.
            - Additional metadata for video includes: pix_format, codec, level, profile, video_bit_rate, dar.
        metadata:
          type: string
          description: Structured metadata to attach to the asset based on the metadata fields defined for your account.
        moderation:
          type: string
          enum:
            - manual
            - webpurify
            - metascan
            - aws_rek
            - aws_rek_video
            - google_video_moderation
            - perception_point
            - duplicate
            - cld
          description: |
            For all asset types, set to:
            - manual to add the uploaded asset to a list of pending assets that can be moderated using the Admin API or the Cloudinary Console.
            - perception_point to automatically moderate the uploaded asset using the Perception Point Malware Detection add-on.

            For images only, set to:
            - webpurify to automatically moderate the uploaded image using the WebPurify Image Moderation add-on.
            - aws_rek to automatically moderate the uploaded image using the Amazon Rekognition AI Moderation add-on.
            - duplicate:<threshold> to detect if the same or a similar image already exists using the Cloudinary Duplicate Image Detection add-on. Set threshold to a float greater than 0 and less than or equal to 1.0 to specify how similar an image needs to be in order to be considered a duplicate. Set threshold to 0 to add an image to the index of images that are searched when duplicate detection is invoked for another image.

            For videos only, set to:
            - aws_rek_video to automatically moderate the uploaded video using the Amazon Rekognition Video Moderation add-on.
            - google_video_moderation automatically moderate the uploaded video using the Google AI Video Moderation add-on.

            To request multiple moderations in a single API call:
            - Send the desired list of moderations as a pipe-separated string with manual moderation, if relevant, being last.

            Note: Rejected assets are automatically invalidated on the CDN within approximately ten minutes.
          example: aws_rek|duplicate:0|perception_point|manual
        notification_url:
          type: string
          description: A URL to notify when the asset is ready.
        phash:
          type: boolean
          description: |
            Whether to return the perceptual hash (pHash) on the uploaded image for image similarity detection.
        quality_analysis:
          type: boolean
          description: Whether to return a quality analysis value for the image between 0 and 1, where 0 means the image is blurry and out of focus and 1 means the image is sharp and in focus. Relevant for images only.
        regions:
          type: string
          description: Regions to detect in the asset.
        responsive_breakpoints:
          type: array
          description: Settings to automatically generate breakpoints for responsive images.
          items:
            type: object
            properties:
              create_derived:
                type: boolean
              max_width:
                type: integer
              min_width:
                type: integer
              bytes_step:
                type: integer
              max_images:
                type: integer
              transformation:
                type: string
        tags:
          type: string
          description: A comma-separated list of tag names to assign to the asset.
        callback:
          type: string
          description: |
            A URL to redirect to after the upload/explicit is completed instead of returning the upload response. 
            Signed upload result parameters are added to the callback URL. This parameter is ignored for XHR (Ajax XMLHttpRequest) or JavaScript Fetch API upload requests.
            Note: This parameter is relevant for direct uploads from a form in the browser. It is automatically set if you perform direct upload from the browser using Cloudinary's SDKs and the jQuery plugin.
    upload_other_parameters:
      type: object
      properties:
        backup:
          type: boolean
          description: Whether to backup the uploaded asset. When set to true, backs up uploaded assets to a secondary storage bucket.
        discard_original_filename:
          type: boolean
          description: Whether to discard the name of the original uploaded file. Relevant when delivering assets as attachments (setting the flag disposition:attachment in delivery URLs).
        overwrite:
          type: boolean
          description: |
            Whether to overwrite existing assets with the same public ID. When set to false, return immediately if an asset with the same public ID already exists. Default: true (when using unsigned upload, the default is false and cannot be changed to true).
        return_delete_token:
          type: boolean
          description: Whether to return a deletion token in the upload response. The token can be used to delete the uploaded asset within approximately 10 minutes using an unauthenticated API call.
        type:
          type: string
          enum:
            - upload
            - authenticated
            - private
            - asset
          description: The delivery type that defines if and how the uploaded asset is available for public delivery. By default, all uploaded assets are public (upload). Possible values are upload, authenticated, private or asset.
        access_mode:
          type: string
          deprecated: true
          x-speakeasy-deprecation-message: The access_mode parameter is no longer supported. To restrict access to assets, you can use the access_control parameter.
          x-speakeasy-deprecation-replacement: access_control
          enum:
            - public
            - authenticated
          description: |
            Allows the asset to behave as if it's of the authenticated 'type' (see above) while still using the default 'upload' type in delivery URLs. The asset can later be made public by changing its access_mode via the Admin API, without having to update any delivery URLs. Valid values: public, and authenticated.
        categorization:
          type: string
          enum:
            - rekognition_scene
            - imagga_tagging
            - aws_rek_tagging
            - google_video_tagging
            - google_tagging
            - visenze_recognition
            - azure_video_indexer
          description: A comma-separated list of the categorization add-ons to run on the asset. Set to google_tagging, google_video_tagging, imagga_tagging and/or aws_rek_tagging to automatically classify the scenes of the uploaded asset.
        ocr:
          type: string
          enum:
            - adv_ocr
          description: Set to adv_ocr to extract all text elements in an image as well as the bounding box coordinates of each detected element using the OCR text detection and extraction add-on.
        raw_convert:
          type: string
          pattern: ^(aspose|azure_video_indexer(:\D+)*|google_speech(:(vt|sr)t)*(:[a-zA-Z-]+)?|extract_text)$
          description: |
            Generates a related file based on the uploaded file.
            - Set to aspose to automatically create a PDF or other image format from a raw Office document using the Aspose Document Conversion add-on. (Asynchronous)
            - Set to google_speech to instruct the Google AI Video Transcription add-on to generate an automatic transcript raw file from an uploaded video. (Asynchronous)
            - Set to extract_text to extract all the text from a PDF file and store it in a raw JSON file with a public ID in the format: [pdf_public_id].extract_text.json. The full URL of the generated JSON file is included in the API response. Unlike the above raw_convert options, this option doesn't require registering for an add-on.(Synchronous)
            - Set to azure_video_indexer to generate AI-powered video insights from Microsoft Azure. (Asynchronous)
          example: google_speech:vtt:en-US
        background_removal:
          type: string
          enum:
            - cloudinary_ai
            - remove_the_background
            - pixelz
          description: |
            Automatically remove the background of an image using an add-on.
            - Set to cloudinary_ai to use the deep-learning based Cloudinary AI Background Removal add-on.
            - Note: this feature has been superseded by background removal on the fly.
            - Set to pixelz to use the human-powered Pixelz Remove-The-Background Editing add-on service.
            Relevant for images only.
          example: pixelz
        public_id:
          type: string
          description: The identifier that is used for accessing the uploaded asset. If not specified, a unique ID is generated automatically.
        transformation:
          type: string
          description: An incoming transformation to run on the uploaded asset before its storage. In contrast to eager, this parameter is applied before the file is stored.
        format:
          type: string
          description: An optional format to convert the uploaded asset to before saving in the cloud.
          example: jpg
        proxy:
          type: string
          description: A proxy to use for fetching remote URLs. The format should be http://hostname:port.
        folder:
          type: string
          deprecated: true
          x-speakeasy-deprecation-message: |
            If Dynamic folders mode is enabled on your product environment, this parameter is deprecated, and it's recommended to use the asset_folder parameter to control where the asset will be placed. If you also want your public_id to match the initial asset folder path, include the use_asset_folder_as_public_id_prefixparameter.
          description: Folder name where the uploaded asset will be stored. This parameter applies when using the Admin API, or when specifying the upload preset for unsigned uploading with the Upload API.
        allowed_formats:
          type: string
          description: |
            A comma-separated list of file formats that are allowed for uploading. Files of other types will be rejected. The formats can be any combination of image types, video formats or raw file extensions.
            Note: You can also add the `format` parameter to convert other file types instead of rejecting them. In this case, only files that would normally be rejected are converted, any file format allowed for upload wont be converted.
          example: mp4,ogv,jpg,png,pdf
        auto_tagging:
          type: number
          description: |
            Automatically assigns tags to an asset according to detected objects or categories with a confidence score higher than the specified value.
            Use together with the detection parameter for:
            - Cloudinary AI Content Analysis
            - Amazon Rekognition Celebrity Detection
            Use together with the categorization parameter for:
            - Google Automatic Video Tagging
            - Google Auto Tagging
            - Imagga Auto Tagging
            - Amazon Rekognition Auto Tagging
          example: 0.5
          minimum: 0
          maximum: 1
        access_control:
          type: string
          description: |
            Restrict access to the asset by passing an array of access types for the asset. The asset is restricted unless one of the access types is valid.
            Possible values for each access type:
            - token requires either Token-based access or Cookie-based access for accessing the asset.
            For example: access_type: "token"
            - anonymous allows public access to the asset during a set time period. The anonymous access type can optionally include start and/or end dates (in ISO 8601 format) that define when the asset is publicly available. Note that you can only include a single 'anonymous' access type. For example:
            access_type: "anonymous", start: "2017-12-15T12:00Z", end: "2018-01-20T12:00Z"
        eval:
          type: string
          description: Allows you to modify upload parameters by specifying custom logic with JavaScript. This can be useful for conditionally adding tags, contextual metadata, structured metadata or eager transformations depending on specific criteria of the uploaded file.
        detection:
          type: string
          description: |
            Invokes the relevant add-on to return a list of detected content.
            Set to:
            - <content-aware model>_[<version>] (e.g. coco_v2) to return a list of detected content using the Cloudinary AI Content Analysis add-on. Can be used together with the auto_tagging parameter to apply tags automatically.
            - captioning to analyze an image and suggest a caption based on the image's contents.
            - iqa to analyze the quality of an image.
            - watermark-detection to detect watermarks in an image.
            - adv_face to return a list of facial attributes using the Advanced Facial Attribute Detection add-on.
            - aws_rek_face to return a list of detected celebrities and facial attributes using the Amazon Rekognition Celebrity Detection add-on. Can be used together with the auto_tagging parameter to apply tags automatically.
          example: coco_v2
        filename_override:
          type: string
          description: Overrides the originally uploaded asset's file name in downloads that use flags like fl_attachment or fl_force_original.
        public_id_prefix:
          type: string
          description: A string or path that's automatically prepended to the public_id with a forward slash. The value can contain the same characters as the public_id including additional forward slashes. This prefix can be useful to provide context and improve the SEO of an asset's filename in the delivery URL, but the value does not impact the location where the asset is stored.
        use_asset_folder_as_public_id_prefix:
          type: boolean
          description: Whether to add the asset_folder value as a prefix to the public_id value (prepended with a forward slash). This ensures that the public ID path will always match the initial asset folder, and can help to retain the behavior that previously existed in fixed folder mode. However, keep in mind that even when this option is used during upload, an asset with a certain public ID path can later be moved to a completely different asset folder hierarchy without impacting the public ID. This option only ensures path matching for the initial upload. Relevant only when public_id_prefix (or folder) has not been separately specified.
        unique_display_name:
          type: boolean
          description: Whether the display name should be unique.
        visual_search:
          type: boolean
          description: Whether to index the image for use with visual searches. Relevant for images only.
        use_filename_as_display_name:
          type: boolean
          description: Whether to automatically assign the original filename of the uploaded asset as the asset's display name. Relevant only if the display_name parameter isn't set.
        use_filename:
          type: boolean
          description: |
            Whether to use the original file name of the uploaded asset if available for the public ID. The file name is normalized and random characters are appended to ensure uniqueness if the file name already exists. Default: false.
        unique_filename:
          type: boolean
          description: |
            When set to false and used together with use_filename, if an asset with the same file name already exists, no random characters are appended to the file name. Instead, the asset is overwritten. Default: true (random characters are added to the file name if needed).
        upload_preset:
          type: string
          description: Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload Presets page of the Console Settings.
        on_success:
          type: string
          description: Allows you to update an asset by specifying custom logic with JavaScript that is executed after the upload to Cloudinary is completed successfully. This can be useful for conditionally adding tags, contextual metadata, and structured metadata, depending on the results of using the detection parameter on upload.
    upload_request_parameters:
      type: object
      properties:
        upload_preset:
          type: string
          description: |
            (Required for unsigned uploading / optional for signed uploading)
            Name of an upload preset that you defined for your Cloudinary product environment. An upload preset consists of upload parameters centrally managed using the Admin API or from the Upload Presets page of the Console Settings. An upload preset may be marked as unsigned, which allows unsigned uploading directly from the browser and restricts the optional parameters to: public_id, folder, tags, context, face_coordinates, regions and custom_coordinates.
    binary_upload_request:
      type: object
      allOf:
        - $ref: '#/components/schemas/signature_parameters'
        - $ref: '#/components/schemas/upload_explicit_parameters'
        - $ref: '#/components/schemas/upload_other_parameters'
        - $ref: '#/components/schemas/upload_request_parameters'
        - type: object
          properties:
            file:
              type: string
              format: binary
              contentMediaType: application/octet-stream
              description: |
                The actual data (byte array buffer).
      required:
        - file
    upload_request:
      type: object
      allOf:
        - $ref: '#/components/schemas/signature_parameters'
        - $ref: '#/components/schemas/upload_explicit_parameters'
        - $ref: '#/components/schemas/upload_other_parameters'
        - $ref: '#/components/schemas/upload_request_parameters'
        - type: object
          properties:
            file:
              type: string
              pattern: ^https?:\/\/|^s3:\/\/|^gcs:\/\/|^ftp:\/\/|^(data:[^;]*;base64,)|^file:\/\/
              description: |
                One of the following:
                - The remote HTTP or HTTPS URL address of an existing file.
                - The Data URI (Base64 encoded), max ~60 MB (62,910,000 chars).
                - The FTP address of an existing file.
                - Local file path starting with file://.
      required:
        - file
    upload_response:
      type: object
      properties:
        url:
          type: string
          description: The URL of the uploaded file.
        secure_url:
          type: string
          description: The secure URL of the uploaded file.
        public_id:
          type: string
          description: The public ID of the uploaded file.
        version:
          type: integer
          description: The version of the uploaded file.
        version_id:
          type: string
          description: The version ID of the uploaded file.
        signature:
          type: string
          description: The signature of the uploaded file.
        width:
          type: integer
          description: The width of the uploaded file.
        height:
          type: integer
          description: The height of the uploaded file.
        asset_id:
          type: string
          description: The asset ID of the uploaded file. This is the ID of the uploaded file in the Cloudinary database.
        format:
          type: string
          description: The format of the uploaded file.
        resource_type:
          type: string
          description: The type of resource that was uploaded.
        created_at:
          type: string
          description: The date and time the file was uploaded.
        tags:
          type: array
          items:
            type: string
          description: The tags of the uploaded file.
        pages:
          type: integer
          description: The number of pages in the uploaded file.
        bytes:
          type: integer
          description: The size of the uploaded file in bytes.
        type:
          type: string
          description: The type of the uploaded file.
        etag:
          type: string
          description: The ETag of the uploaded file.
        placeholder:
          type: boolean
          description: Whether the uploaded file is a placeholder.
        original_filename:
          type: string
          description: The original filename of the uploaded file.
        image_metadata:
          type: object
          description: The image metadata of the uploaded file.
        illustration_score:
          type: number
          description: The illustration score of the uploaded file.
        semi_transparent:
          type: boolean
          description: Whether the uploaded file is semi-transparent.
        grayscale:
          type: boolean
          description: Whether the uploaded file is grayscale.
        eager:
          type: array
          items:
            type: object
            properties:
              transformation:
                type: string
              width:
                type: integer
              height:
                type: integer
              bytes:
                type: integer
              format:
                type: string
              url:
                type: string
              secure_url:
                type: string
        api_key:
          type: string
          description: The API key used to upload the file.
      example:
        asset_id: 3515c6000a548515f1134043f9785c2f
        public_id: gotjephlnz2jgiu20zni
        version: 1719307544
        version_id: 7d2cc533bee9ff39f7da7414b61fce7e
        signature: d0b1009e3271a942836c25756ce3e04d205bf754
        width: 1920
        height: 1441
        format: jpg
        resource_type: image
        created_at: '2024-06-25T09:25:44Z'
        tags: []
        pages: 1
        bytes: 896838
        type: upload
        etag: 2a2df1d2d2c3b675521e866599273083
        placeholder: false
        url: http://res.cloudinary.com/cld-docs/image/upload/v1719307544/gotjephlnz2jgiu20zni.jpg
        secure_url: https://res.cloudinary.com/cld-docs/image/upload/v1719307544/gotjephlnz2jgiu20zni.jpg
        asset_folder: ''
        display_name: gotjephlnz2jgiu20zni
        image_metadata:
          JFIFVersion: '1.01'
          ResolutionUnit: None
          XResolution: '1'
          YResolution: '1'
          Colorspace: RGB
          DPI: '0'
        illustration_score: 0
        semi_transparent: false
        grayscale: false
        original_filename: sample
        eager:
          - transformation: c_pad,h_300,w_400
            width: 400
            height: 300
            bytes: 26775
            format: jpg
            url: http://res.cloudinary.com/cld-docs/image/upload/c_pad,h_300,w_400/v1719307544/gotjephlnz2jgiu20zni.jpg
            secure_url: https://res.cloudinary.com/cld-docs/image/upload/c_pad,h_300,w_400/v1719307544/gotjephlnz2jgiu20zni.jpg
        api_key: '614335564976464'
    async_upload_response:
      type: object
      description: Response returned when an upload is processed asynchronously (async=true)
      required:
        - status
        - batch_id
        - type
      properties:
        status:
          type: string
          enum:
            - pending
          description: The status of the asynchronous upload. Will be 'pending' for async uploads.
        resource_type:
          type: string
          enum:
            - image
            - video
            - raw
          description: The type of resource being uploaded. This field may be omitted if resource_type is not known at the time of the call.
        type:
          type: string
          enum:
            - upload
            - private
            - authenticated
          default: upload
          description: The storage type of the asset. Defaults to 'upload'.
        public_id:
          type: string
          description: The public ID assigned to the upload. May be omitted if it will be auto-generated.
        batch_id:
          type: string
          description: A unique identifier for the asynchronous upload job.
        requester_ip:
          type: string
          description: The IP address of the requester. This is only included if a product environment has requester_ip tracking enabled.
      example:
        status: pending
        resource_type: image
        type: upload
        public_id: sample_image
        batch_id: 9c2f5a46b3a6c4d9e8f7g0h1i2j3k4l5
    html_redirect:
      type: string
      description: HTML redirect response
      example: <html><body>You are being <a href="http://example.cloudinary.com?bytes=5243000&amp;done=false&amp;kind=upload&amp;resource_type=image">redirected</a>.</body></html>
    api_error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - error
    non_final_chunk_upload_response:
      type: object
      description: |
        Status information returned for in-progress chunked uploads.
        Note that fields that are not yet determined or not known at the time of the call are omitted from the response.
      required:
        - done
        - bytes
      properties:
        done:
          type: boolean
          description: Whether the upload is complete. Will be false for all but the last chunk.
        bytes:
          type: integer
          description: The total number of bytes uploaded so far.
        kind:
          type: string
          enum:
            - upload
            - private
            - authenticated
          description: The storage type of the asset. Defaults to 'upload'.
        resource_type:
          type: string
          description: The type of resource being uploaded (e.g., "image", "video", "raw"). May be omitted in early chunks when using auto detection.
        public_id:
          type: string
          description: The public ID assigned to the upload. May be omitted in early chunks if it will be auto-generated upon completion.
      example:
        done: false
        bytes: 1000000
        kind: upload
        resource_type: image
        public_id: sample_image
    destroy_request:
      type: object
      required:
        - asset_id
        - timestamp
        - api_key
        - signature
      properties:
        asset_id:
          type: string
          description: The ID of the asset to delete.
        timestamp:
          type: integer
          description: The current Unix timestamp.
        api_key:
          type: string
          description: The API key for authentication.
        signature:
          type: string
          description: The signed request signature.
        invalidate:
          type: boolean
          description: Whether to invalidate CDN cache. Default is false.
        notification_url:
          type: string
          format: uri
          description: URL to receive completion notification.
        callback:
          type: string
          format: uri
          description: URL for redirect after operation completion.
    destroy_response:
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - not found
          description: The result of the deletion operation.
        asset_folder:
          type: string
          description: The asset folder path. Only included when folder decoupling is enabled.
      required:
        - result
    info:
      type: object
      properties:
        asset_id:
          type: string
        public_id:
          type: string
        asset_folder:
          type: string
        display_name:
          type: string
        folder:
          type: string
          x-speakeasy-deprecation-message: Use asset_folder instead with folder decoupling.
        filename:
          type: string
        format:
          type: string
        version:
          type: integer
        resource_type:
          type: string
        type:
          type: string
        created_at:
          type: string
          format: date-time
        uploaded_at:
          type: string
          format: date-time
        bytes:
          type: integer
        backup_bytes:
          type: integer
        width:
          type:
            - integer
            - 'null'
        height:
          type:
            - integer
            - 'null'
        aspect_ratio:
          type:
            - number
            - 'null'
        pixels:
          type:
            - integer
            - 'null'
        tags:
          type: array
          items:
            type: string
          description: Included if 'tags=true' parameter is used.
        context:
          type: object
          description: Included if 'context=true' parameter is used.
          properties:
            custom:
              type: object
              additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        moderation_kind:
          type: string
          description: The type of moderation applied to the asset.
          example: manual
        moderation_status:
          type: string
          description: The current status of the moderation process for the asset.
          example: pending
        moderation:
          type: array
          description: Included if 'moderations=true' parameter is used.
          items:
            type: object
            properties:
              kind:
                type: string
              status:
                type: string
              updated_at:
                type: string
                format: date-time
        backup:
          type: boolean
        access_mode:
          type: string
        url:
          type: string
          format: uri
        secure_url:
          type: string
          format: uri
        status:
          type: string
        access_control:
          type:
            - array
            - 'null'
          items:
            type: object
        etag:
          type: string
    list_response:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/info'
        next_cursor:
          type:
            - string
            - 'null'
        total_count:
          type: integer
    restore_response:
      type: object
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/info'
          - type: object
            properties:
              error:
                type: string
                enum:
                  - no_backup
                  - failed
                  - unauthorized
                description: The error message if restore failed for a specific asset.
    DeleteResourceByPublicIdsRequest:
      type: object
      properties:
        public_ids:
          type: array
          items:
            type: string
          description: A list of public IDs of the resources to delete.
        prefix:
          type: string
          description: Delete all assets, including derived assets, where the public ID starts with the specified prefix (up to a maximum of 1000 original resources).
        all:
          type: boolean
          description: Delete all assets (of the relevant resource_type and type), including derived assets (up to a maximum of 1000 original resources).
        resource_type:
          type: string
          enum:
            - image
            - video
            - raw
          default: image
          description: 'The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.'
        keep_original:
          type: boolean
          default: false
          description: 'Whether to delete only the derived assets. Default: false.'
        invalidate:
          type: boolean
          default: false
          description: 'Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. Default: false.'
        next_cursor:
          type: string
          description: (Only when deleting by prefix or all) When a deletion request has more than 1000 resources to delete, the response includes the partial boolean parameter set to true, as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request.
        transformations:
          type: string
          description: Only the derived assets matching this hash of transformation parameters will be deleted. You can include multiple transformations separated by a pipe character (|).
      oneOf:
        - required:
            - public_ids
        - required:
            - prefix
        - required:
            - all
    ResourceUpdateRequest:
      type: object
      properties:
        display_name:
          type: string
          description: The display name of the resource.
          example: My Product Image
        unique_display_name:
          type: boolean
          description: 'Whether to ensure the display name is unique across all resources. If false, the operation will fail if a resource with the same display name exists. Default: false'
          default: false
        asset_folder:
          type: string
          description: The folder where the asset should be placed.
          example: products/summer
        tags:
          type: string
          description: A comma-separated list of tags to assign to the resource.
          example: product,summer,sale
        context:
          type: string
          description: A pipe-separated list of key-value pairs of contextual metadata.
          example: alt=My product image|caption=Summer collection
        metadata:
          type: string
          description: A pipe-separated list of custom metadata fields (by external_id) and their values.
          example: in_stock_id=50|color_id=["green","red"]
        clear_invalid:
          type: boolean
          description: 'Whether to clear invalid metadata fields. If false, invalid fields will be preserved. Default: false'
          default: false
        face_coordinates:
          type: string
          description: Face coordinates as comma-separated values, with multiple faces separated by pipes.
          pattern: ^(\d+,\d+,\d+,\d+)(\|\d+,\d+,\d+,\d+)*$
          example: 10,20,150,130|213,345,82,61
        custom_coordinates:
          type: string
          description: Custom coordinates as comma-separated values, with multiple coordinates separated by pipes.
          pattern: ^(\d+,\d+,\d+,\d+)(\|\d+,\d+,\d+,\d+)*$
          example: 10,20,150,130|213,345,82,61
        regions:
          type: string
          description: Named groups of coordinate pairs representing regions.
          example:
            name1:
              - - 1
                - 2
              - - 3
                - 4
            name2:
              - - 5
                - 6
              - - 7
                - 8
              - - 9
                - 10
        quality_override:
          type: string
          description: Quality override value that will override any automatic quality transformations.
          examples:
            - '80:420'
            - auto:best
        moderation_status:
          type: string
          enum:
            - approved
            - rejected
          description: The moderation status of the resource.
        auto_tagging:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence threshold for auto-tagging.
        detection:
          type: string
          description: The type of detection to perform on the resource.
          examples:
            - captioning
            - coco_v2
            - watermark-detection
        ocr:
          type: string
          enum:
            - adv_ocr
          description: The type of OCR to perform on the resource.
        raw_convert:
          type: string
          enum:
            - aspose
            - google_speech
            - extract_text
          description: The conversion to apply for raw files.
        categorization:
          type: string
          enum:
            - google_tagging
            - google_video_tagging
            - imagga_tagging
            - aws_rek_tagging
          description: The type of categorization to perform on the resource.
        visual_search:
          type: boolean
          description: 'Whether to index the resource with visual search. If true, the resource will be indexed for visual search capabilities. Default: false'
        background_removal:
          type: string
          enum:
            - cloudinary_ai
            - pixelz
          description: The background removal provider to use for the resource.
        access_control:
          type: string
          description: |
            A JSON array of access_types for the asset. The asset is accessible as long as one of the access types is valid.
            Possible values for each access type:
              - 'token' - requires either Token-based access or Cookie-based access for accessing the resource.
              - 'anonymous' - allows public access to the resource. The anonymous access type should also include start and end dates (in ISO 8601 format) defining when the resource is publicly available.
          examples:
            - - access_type: token
            - - access_type: anonymous
                start: 2017-12-15T12:00Z
                end: 2018-01-20T12:00Z
      additionalProperties: false
    usage_response:
      type: object
      properties:
        plan:
          type: string
          description: The current plan name
        last_updated:
          type: string
          format: date
          description: When the usage data was last updated
        date_requested:
          type: string
          format: date-time
          description: The date for which usage was requested
        transformations:
          type: object
          properties:
            usage:
              type: integer
              description: Number of transformations used
        objects:
          type: object
          properties:
            usage:
              type: integer
              description: Number of objects used
            limit:
              type: integer
              description: Object limit for the plan
            used_percent:
              type: number
              format: float
              description: Percentage of object limit used
        bandwidth:
          type: object
          properties:
            usage:
              type: integer
              description: Bandwidth used in bytes
            limit:
              type: integer
              description: Bandwidth limit for the plan
            used_percent:
              type: number
              format: float
              description: Percentage of bandwidth limit used
        storage:
          type: object
          properties:
            usage:
              type: integer
              description: Storage used in bytes
            limit:
              type: integer
              description: Storage limit for the plan
            used_percent:
              type: number
              format: float
              description: Percentage of storage limit used
        impressions:
          type: object
          properties:
            usage:
              type: integer
              description: Number of impressions used
        seconds_delivered:
          type: object
          properties:
            usage:
              type: integer
              description: Number of seconds delivered
        resources:
          type: integer
          description: Number of resources stored
        derived_resources:
          type: integer
          description: Number of derived resources
        requests:
          type: integer
          description: Number of requests made
        media_limits:
          type: object
          description: Upload size and pixel limits
          properties:
            image_max_size_bytes:
              type: integer
              description: Maximum size for images in bytes
            video_max_size_bytes:
              type: integer
              description: Maximum size for videos in bytes
            raw_max_size_bytes:
              type: integer
              description: Maximum size for raw files in bytes
            image_max_px:
              type: integer
              description: Maximum pixels for images
            asset_max_total_px:
              type: integer
              description: Maximum total pixels for assets
    asset_relation_info:
      type: object
      properties:
        message:
          type: string
          example: success
          description: The message indicating the result of the operation.
        code:
          type: string
          enum:
            - rejected_ids
            - invalid_ids
            - internal_error_ids
            - non_existing_ids
            - invalid_relate_to_self_id
            - already_exists_ids
            - relation_does_not_exist_ids
            - success_ids
          example: success_ids
          description: The code indicating the result of the operation.
        asset:
          type: string
          example: f12345a5c789c
          description: The identifier of the asset, either asset ID or public ID path.
        status:
          type: integer
          example: 200
          description: The HTTP status code indicating the result of the operation.
    asset_relations_response:
      type: object
      properties:
        failed:
          type: array
          items:
            $ref: '#/components/schemas/asset_relation_info'
        success:
          type: array
          items:
            $ref: '#/components/schemas/asset_relation_info'
      example:
        failed: []
        success:
          - message: success
            code: success_ids
            asset: f12345a5c789c
            status: 200
          - message: success
            code: success_ids
            asset: bbb0efc00c0f12
            status: 200
    asset_relations_delete_response:
      type: object
      properties:
        failed:
          type: array
          items:
            $ref: '#/components/schemas/asset_relation_info'
        success:
          type: array
          items:
            $ref: '#/components/schemas/asset_relation_info'
      example:
        failed: []
        success:
          - message: success
            asset_id: f12345a5c789c
          - message: success
            asset_id: bbb0efc00c0f12
    folder:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder.
        path:
          type: string
          description: The full path of the folder.
        external_id:
          type: string
          description: The unique identifier for the folder.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the folder was created.
      required:
        - name
        - path
        - external_id
      example:
        name: a
        path: folder/a
        external_id: abcdefg1234567890
    folders_list_response:
      type: object
      properties:
        folders:
          type: array
          description: The root folders in the product environment.
          items:
            $ref: '#/components/schemas/folder'
        next_cursor:
          type:
            - string
            - 'null'
          description: A cursor for pagination. Always null for root folders.
        total_count:
          type: integer
          description: The total number of root folders.
      required:
        - folders
        - next_cursor
        - total_count
      example:
        folders:
          - name: a
            path: folder/a
            external_id: abcdefg1234567890
          - name: b
            path: folder/b
            external_id: hijklmn0987654321
        next_cursor: null
        total_count: 2
    folders_search_response:
      type: object
      properties:
        total_count:
          type: integer
          description: The total number of folders matching the search.
        time:
          type: integer
          description: The time taken to execute the search (ms).
        next_cursor:
          type:
            - string
            - 'null'
          description: A cursor for pagination.
        folders:
          type: array
          items:
            $ref: '#/components/schemas/folder'
          description: The folders matching the search.
      required:
        - total_count
        - time
        - folders
      example:
        total_count: 14
        time: 1136
        next_cursor: 0a37f8c9f65e79c1cbe782d47987ed108d9f9e0dad4b0666adbf4eac9a634191996204a0ef84ce7b3e0e
        folders:
          - name: 1_folder_param
            path: my_parent/1_folder_param
            external_id: c7c08f8ecf093353d669d2ea3123967c7
          - name: a_folder_param
            path: my_parent/a_folder_param
            external_id: c7c08b736592482c1125ba5d689ab8779
    DerivedDestroyRequest:
      type: object
      description: Request parameters for deleting derived resources
      properties:
        derived_resource_ids:
          type: array
          items:
            type: string
          description: Array of derived resource IDs to delete specific derived resources
          example:
            - 1234567890abcdef
            - fedcba0987654321
        invalidate:
          type: boolean
          description: Whether to invalidate the CDN cache for the deleted resources
          example: true
      required:
        - derived_resource_ids
    DerivedDestroyResponse:
      type: object
      description: Response for derived resource deletion
      properties:
        deleted:
          type: object
          additionalProperties:
            type: string
            enum:
              - deleted
              - not_found
          description: Map of derived resource IDs to deletion status
          example:
            1234567890abcdef: deleted
            fedcba0987654321: not_found
        unauthorized:
          type: array
          items:
            type: string
          description: Array of derived resource IDs that were not authorized to be deleted
        invalidation:
          type: object
          properties:
            took:
              type: number
              description: Time taken for CDN invalidation in seconds
              example: 25
            urls:
              type: array
              items:
                type: string
              description: Array of URLs that were invalidated
              example:
                - /image/upload/w_100/sample
                - /image/upload/w_200/sample
    search_parameters:
      type: object
      description: Common parameters for resource search operations.
      properties:
        expression:
          type: string
          description: The search expression. Supports exact match, wildcard match, presence, greater/less than, and range. For details on building expressions, see the Search API documentation.
          example: resource_type:image AND tags:kitten
        sort_by:
          type: array
          items:
            type: string
          description: The fields to sort results by. You can specify multiple fields with optional directions (asc/desc). Default direction is desc.
          example:
            - created_at
            - public_id desc
        max_results:
          type: integer
          minimum: 1
          maximum: 500
          description: The maximum number of results to return. Default - 50. Maximum - 500.
          example: 30
        next_cursor:
          type: string
          description: The cursor value to get the next page of results. Available when a previous search returned more results than max_results.
        aggregate:
          oneOf:
            - type: array
              items:
                type: string
                enum:
                  - format
                  - resource_type
                  - type
              description: The fields to aggregate results by. Simple aggregation by field name.
              example:
                - format
                - resource_type
            - type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - bytes
                      - image_pixels
                      - video_pixels
                      - duration
                  ranges:
                    type: array
                    items:
                      type: object
                      properties:
                        from:
                          type: number
                          description: Start of the range (inclusive)
                        to:
                          type: number
                          description: End of the range (exclusive)
                required:
                  - type
                  - ranges
              description: Range-based aggregations for numeric fields
              example:
                - type: bytes
                  ranges:
                    - from: 0
                      to: 10000
                    - from: 10000
                      to: 100000
        with_field:
          type: array
          items:
            type: string
            enum:
              - context
              - tags
              - image_metadata
              - image_analysis
              - metadata
              - quality_analysis
              - accessibility_analysis
          description: The additional fields to include in the response. Note that the fields parameter takes precedence over this parameter.
        fields:
          type: string
          description: |
            A comma-separated list of fields to include in the response.
            Notes:
            - This parameter takes precedence over the with_field parameter, so if you want any additional asset attributes returned, make sure to also include them in this list (e.g., tags or context).
            - The following fields are always included in the response: public_id, asset_id, asset_folder, created_at, status, type, and resource_type.
          example: tags,context,metadata
    search_response:
      type: object
      description: The response object returned by search operations.
      properties:
        total_count:
          type: integer
          description: The total number of resources matching the search criteria.
          example: 42
        time:
          type: integer
          description: The time taken to execute the search query in milliseconds.
          example: 42
        resources:
          type: array
          description: The list of resources matching the search criteria. Can be empty if no results found.
          items:
            type: object
            description: Resource fields that can be returned. All fields are optional and can be filtered using the fields parameter.
            properties:
              asset_id:
                type: string
                description: The unique identifier of the asset.
                example: 09169cf604b03521789d1b3b8cca53d1
              public_id:
                type: string
                description: The public identifier that is used to build the URL.
                example: blue_sweater
              asset_folder:
                type: string
                description: The folder where the asset is stored.
                example: Clothing Sale
              filename:
                type: string
                description: The original filename of the asset.
                example: blue_sweater
              display_name:
                type: string
                description: The display name of the asset.
                example: blue_sweater
              format:
                type: string
                description: The format of the asset.
                example: jpg
              version:
                type: integer
                description: The version number of the asset.
                example: 1719316754
              resource_type:
                type: string
                description: The type of resource.
                enum:
                  - image
                  - video
                  - raw
                example: image
              type:
                type: string
                description: The delivery type of the asset.
                enum:
                  - upload
                  - private
                  - authenticated
                  - list
                  - fetch
                example: upload
              created_at:
                type: string
                format: date-time
                description: The timestamp when the asset was created.
                example: '2024-06-25T11:59:14+00:00'
              uploaded_at:
                type: string
                format: date-time
                description: The timestamp when the asset was uploaded.
                example: '2024-06-25T11:59:14+00:00'
              bytes:
                type: integer
                description: The size of the asset in bytes.
                example: 71063
              backup_bytes:
                type: integer
                description: The size of the backup asset in bytes.
                example: 71063
              width:
                type: integer
                description: The width of the asset in pixels.
                example: 4800
              height:
                type: integer
                description: The height of the asset in pixels.
                example: 6400
              aspect_ratio:
                type: number
                format: float
                description: The aspect ratio of the asset (width/height).
                example: 0.75
              pixels:
                type: integer
                description: The total number of pixels in the asset.
                example: 307200
              url:
                type: string
                format: uri
                description: The HTTP URL for accessing the asset.
                example: http://res.cloudinary.com/demo/image/upload/v1719316754/blue_sweater.jpg
              secure_url:
                type: string
                format: uri
                description: The HTTPS URL for accessing the asset.
                example: https://res.cloudinary.com/demo/image/upload/v1719316754/blue_sweater.jpg
              status:
                type: string
                description: The current status of the asset.
                enum:
                  - active
                  - inactive
                example: active
              access_mode:
                type: string
                description: The access mode of the asset.
                enum:
                  - public
                  - authenticated
                example: public
              access_control:
                type:
                  - object
                  - 'null'
                description: The access control settings for the asset.
                example: null
              etag:
                type: string
                description: The ETag of the asset.
                example: 7242da7b353e7da2c3eb8c006165b385
              created_by:
                type: object
                description: Information about who created the asset.
                properties:
                  access_key:
                    type: string
                    description: The access key of the user who created the asset.
                    example: '614335564976464'
              uploaded_by:
                type: object
                description: Information about who uploaded the asset.
                properties:
                  access_key:
                    type: string
                    description: The access key of the user who uploaded the asset.
                    example: '614335564976464'
              context:
                type: object
                description: Custom context metadata associated with the asset.
              tags:
                type: array
                items:
                  type: string
                description: Tags associated with the asset.
              image_metadata:
                type: object
                description: Technical metadata extracted from the image.
              image_analysis:
                type: object
                description: Results of image analysis.
              metadata:
                type: object
                description: Structured metadata associated with the asset.
              quality_analysis:
                type: object
                description: Results of quality analysis.
              accessibility_analysis:
                type: object
                description: Results of accessibility analysis.
        next_cursor:
          type:
            - string
            - 'null'
          description: A cursor for pagination. Only included when there are more results available.
          example: e4d03a236b27e306e56719f74d05cdef
        aggregations:
          type: object
          description: Aggregation results when the aggregate parameter is used in the request. Only included when aggregations are requested.
          properties:
            values:
              type: array
              description: Array of aggregation values when using simple aggregation (e.g., by format, resource_type, etc.)
              items:
                type: object
                properties:
                  value:
                    type: string
                    description: The value being aggregated
                    example: jpg
                  count:
                    type: integer
                    description: The count of resources with this value
                    example: 42
            ranges:
              type: array
              description: Array of range-based aggregation results when using range aggregation (e.g., bytes, width, height, etc.)
              items:
                type: object
                properties:
                  from:
                    type: number
                    description: Start of the range (inclusive)
                    example: 0
                  to:
                    type: number
                    description: End of the range (exclusive)
                    example: 1048576
                  count:
                    type: integer
                    description: The count of resources within this range
                    example: 17
    visual_search_parameters:
      description: Parameters for visual search operations
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - image_url
          properties:
            image_url:
              type: string
              format: uri
              description: The URL of an image to use as the source for finding visually similar images
              example: https://res.cloudinary.com/demo/image/upload/sample.jpg
            threshold:
              type: number
              minimum: 0
              maximum: 1
              description: The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
              example: 0.8
        - type: object
          additionalProperties: false
          required:
            - image_asset_id
          properties:
            image_asset_id:
              type: string
              description: The asset ID of an existing image to use as the source for finding visually similar images
              example: 09169cf604b03521789d1b3b8cca53d1
            threshold:
              type: number
              minimum: 0
              maximum: 1
              description: The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
              example: 0.8
        - type: object
          additionalProperties: false
          required:
            - text
          properties:
            text:
              type: string
              description: A textual description to find visually similar images
              example: shirts
            threshold:
              type: number
              minimum: 0
              maximum: 1
              description: The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
              example: 0.8
  requestBodies:
    upload_request_body:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/binary_upload_request'
        application/json:
          schema:
            $ref: '#/components/schemas/upload_request'
  examples:
    GetResourceResponseExample:
      summary: Get resource by asset ID response example
      value:
        asset_id: 03a5b92135161439031d3834c04bc31b
        public_id: sample
        format: jpg
        version: 1719304854
        resource_type: image
        type: upload
        created_at: '2021-06-25T08:40:54Z'
        bytes: 120253
        width: 864
        height: 576
        asset_folder: ''
        display_name: sample
        url: http://res.cloudinary.com/cld-docs/image/upload/v1719304854/sample.jpg
        secure_url: https://res.cloudinary.com/cld-docs/image/upload/v1719304854/sample.jpg
        tags:
          - flower
          - plant
          - nature
        context:
          custom:
            alt: sample flower
            caption: beautiful flower
        metadata:
          approval_status_0: status_new
          categories_0:
            - cat_mens_clothes
            - cat_shirts
            - qzaihnfnasrzba0qrdpr
          owner_0: Adam Adams
          product_id_0: 12345
          publish_date_0: '2022-02-17'
        last_updated:
          access_control_updated_at: '2022-10-13T03:49:21Z'
          context_updated_at: '2022-11-10T06:05:21Z'
          metadata_updated_at: '2022-10-14T06:40:13Z'
          public_id_updated_at: '2022-12-11T05:41:21Z'
          tags_updated_at: '2022-12-14T06:09:21Z'
          updated_at: '2022-12-14T06:09:21Z'
        next_cursor: 041a39fc10971b9eabd4993470f6bfaf
        derived:
          - transformation: c_fill,w_100,h_100
            format: jpg
            bytes: 7112
            id: 8267a869b62a93a59248f35d7f124c1f
            url: http://res.cloudinary.com/cld-docs/image/upload/c_fill,w_100,h_100/v1312461204/sample.jpg
            secure_url: https://res.cloudinary.com/cld-docs/image/upload/c_fill,w_100,h_100/v1312461204/sample.jpg
          - transformation: w_230,h_168,c_fit
            format: jpg
            bytes: 19173
            id: 383e22a57167445552a3cdc16f0a0c85
            url: http://res.cloudinary.com/cld-docs/image/upload/w_230,h_168,c_fit/v1312461204/sample.jpg
            secure_url: https://res.cloudinary.com/cld-docs/image/upload/w_230,h_168,c_fit/v1312461204/sample.jpg
        etag: 619dfd2901577eb4259f91a2c0e43dac
        faces:
          - - 98
            - 74
            - 61
            - 83
          - - 140
            - 130
            - 52
            - 71
        illustration_score: 0
        semi_transparent: false
        grayscale: false
        colors:
          - - '#162E02'
            - 6.7
          - - '#385B0C'
            - 6.3
          - - '#F3285C'
            - 5
          - - '#B3CB6E'
            - 5
          - - '#688F1C'
            - 4.4
          - - '#324D07'
            - 4.4
          - - '#8EAA34'
            - 4.3
          - - '#4F6D0D'
            - 4.2
          - - '#789446'
            - 4.1
          - - '#DF1327'
            - 3.9
          - - '#A10B12'
            - 3.7
          - - '#273804'
            - 3.4
          - - '#0D1802'
            - 3.4
          - - '#D5E191'
            - 3.2
          - - '#646E20'
            - 3.1
          - - '#94AF4D'
            - 2.9
          - - '#FB54A9'
            - 2.8
          - - '#48570B'
            - 2.7
          - - '#ACC655'
            - 2.7
          - - '#FCA2D9'
            - 2.7
          - - '#63110A'
            - 2.6
          - - '#E9B327'
            - 2.2
          - - '#6D644D'
            - 2.1
          - - '#6D8D12'
            - 2
          - - '#8F9F27'
            - 1.9
          - - '#C3573E'
            - 1.8
          - - '#CFD76E'
            - 1.6
          - - '#A0B058'
            - 1.6
          - - '#FCD0E9'
            - 1.6
          - - '#728F2D'
            - 1.4
          - - '#F958A1'
            - 1.4
          - - '#D1B694'
            - 1
        predominant:
          google:
            - - yellow
              - 52.9
            - - pink
              - 13.5
            - - red
              - 12
            - - black
              - 10.1
            - - green
              - 6.3
        versions:
          - version_id: d214063097a43d1d1293db61a397f60f
            version: '1312461204'
            format: jpg
            size: 109669
            time: '2021-08-04T12:33:24+00:00'
            restorable: false
    DeleteResourcesResponseExample:
      summary: Delete resources response example
      value:
        deleted:
          image1: deleted
          image2: deleted
        partial: false
    UpdateResourceResponseExample:
      summary: Update resource response example
      value:
        asset_id: bc71d3cedb739ed931be3706e94c413a
        public_id: qdi8r768kj5tticu8keh
        format: jpg
        version: 1747134921
        resource_type: image
        type: upload
        created_at: '2025-05-13T11:15:21Z'
        bytes: 206960
        width: 400
        height: 300
        asset_folder: ''
        display_name: qdi8r768kj5tticu8keh
        url: http://res.cloudinary.com/cloud-name/image/upload/v1747134921/qdi8r768kj5tticu8keh.jpg
        secure_url: https://res.cloudinary.com/cloud-name/image/upload/v1747134921/qdi8r768kj5tticu8keh.jpg
        moderation_kind: manual
        moderation_status: approved
        moderation:
          - kind: manual
            status: approved
            updated_at: '2025-05-13T11:15:22Z'
x-speakeasy-globals:
  parameters: null
